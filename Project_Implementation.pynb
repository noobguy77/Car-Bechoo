{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Importing Libraries"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import numpy as np\n",
    "from matplotlib import pyplot as plt\n",
    "import seaborn as sns\n",
    "import os\n",
    "from scipy.stats import iqr \n",
    "from sklearn.preprocessing import LabelEncoder\n",
    "from collections import Counter as c\n",
    "from sklearn.metrics import r2_score,mean_absolute_error,confusion_matrix, classification_report  \n",
    "from sklearn.model_selection import train_test_split  \n",
    "from sklearn.ensemble import RandomForestRegressor"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Importing Dataset"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>name</th>\n",
       "      <th>year</th>\n",
       "      <th>selling_price</th>\n",
       "      <th>km_driven</th>\n",
       "      <th>fuel</th>\n",
       "      <th>seller_type</th>\n",
       "      <th>transmission</th>\n",
       "      <th>owner</th>\n",
       "      <th>mileage</th>\n",
       "      <th>engine</th>\n",
       "      <th>max_power</th>\n",
       "      <th>torque</th>\n",
       "      <th>seats</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Maruti Swift Dzire VDI</td>\n",
       "      <td>2014</td>\n",
       "      <td>450000</td>\n",
       "      <td>145500</td>\n",
       "      <td>Diesel</td>\n",
       "      <td>Individual</td>\n",
       "      <td>Manual</td>\n",
       "      <td>First Owner</td>\n",
       "      <td>23.4 kmpl</td>\n",
       "      <td>1248 CC</td>\n",
       "      <td>74 bhp</td>\n",
       "      <td>190Nm@ 2000rpm</td>\n",
       "      <td>5.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Skoda Rapid 1.5 TDI Ambition</td>\n",
       "      <td>2014</td>\n",
       "      <td>370000</td>\n",
       "      <td>120000</td>\n",
       "      <td>Diesel</td>\n",
       "      <td>Individual</td>\n",
       "      <td>Manual</td>\n",
       "      <td>Second Owner</td>\n",
       "      <td>21.14 kmpl</td>\n",
       "      <td>1498 CC</td>\n",
       "      <td>103.52 bhp</td>\n",
       "      <td>250Nm@ 1500-2500rpm</td>\n",
       "      <td>5.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Honda City 2017-2020 EXi</td>\n",
       "      <td>2006</td>\n",
       "      <td>158000</td>\n",
       "      <td>140000</td>\n",
       "      <td>Petrol</td>\n",
       "      <td>Individual</td>\n",
       "      <td>Manual</td>\n",
       "      <td>Third Owner</td>\n",
       "      <td>17.7 kmpl</td>\n",
       "      <td>1497 CC</td>\n",
       "      <td>78 bhp</td>\n",
       "      <td>12.7@ 2,700(kgm@ rpm)</td>\n",
       "      <td>5.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Hyundai i20 Sportz Diesel</td>\n",
       "      <td>2010</td>\n",
       "      <td>225000</td>\n",
       "      <td>127000</td>\n",
       "      <td>Diesel</td>\n",
       "      <td>Individual</td>\n",
       "      <td>Manual</td>\n",
       "      <td>First Owner</td>\n",
       "      <td>23.0 kmpl</td>\n",
       "      <td>1396 CC</td>\n",
       "      <td>90 bhp</td>\n",
       "      <td>22.4 kgm at 1750-2750rpm</td>\n",
       "      <td>5.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Maruti Swift VXI BSIII</td>\n",
       "      <td>2007</td>\n",
       "      <td>130000</td>\n",
       "      <td>120000</td>\n",
       "      <td>Petrol</td>\n",
       "      <td>Individual</td>\n",
       "      <td>Manual</td>\n",
       "      <td>First Owner</td>\n",
       "      <td>16.1 kmpl</td>\n",
       "      <td>1298 CC</td>\n",
       "      <td>88.2 bhp</td>\n",
       "      <td>11.5@ 4,500(kgm@ rpm)</td>\n",
       "      <td>5.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                           name  year  selling_price  km_driven    fuel  \\\n",
       "0        Maruti Swift Dzire VDI  2014         450000     145500  Diesel   \n",
       "1  Skoda Rapid 1.5 TDI Ambition  2014         370000     120000  Diesel   \n",
       "2      Honda City 2017-2020 EXi  2006         158000     140000  Petrol   \n",
       "3     Hyundai i20 Sportz Diesel  2010         225000     127000  Diesel   \n",
       "4        Maruti Swift VXI BSIII  2007         130000     120000  Petrol   \n",
       "\n",
       "  seller_type transmission         owner     mileage   engine   max_power  \\\n",
       "0  Individual       Manual   First Owner   23.4 kmpl  1248 CC      74 bhp   \n",
       "1  Individual       Manual  Second Owner  21.14 kmpl  1498 CC  103.52 bhp   \n",
       "2  Individual       Manual   Third Owner   17.7 kmpl  1497 CC      78 bhp   \n",
       "3  Individual       Manual   First Owner   23.0 kmpl  1396 CC      90 bhp   \n",
       "4  Individual       Manual   First Owner   16.1 kmpl  1298 CC    88.2 bhp   \n",
       "\n",
       "                     torque  seats  \n",
       "0            190Nm@ 2000rpm    5.0  \n",
       "1       250Nm@ 1500-2500rpm    5.0  \n",
       "2     12.7@ 2,700(kgm@ rpm)    5.0  \n",
       "3  22.4 kgm at 1750-2750rpm    5.0  \n",
       "4     11.5@ 4,500(kgm@ rpm)    5.0  "
      ]
     },
     "execution_count": 2,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df = pd.read_csv('Car details v3.csv')\n",
    "df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "name               0\n",
       "year               0\n",
       "selling_price      0\n",
       "km_driven          0\n",
       "fuel               0\n",
       "seller_type        0\n",
       "transmission       0\n",
       "owner              0\n",
       "mileage          221\n",
       "engine           221\n",
       "max_power        215\n",
       "torque           222\n",
       "seats            221\n",
       "dtype: int64"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.isnull().sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "name             False\n",
       "year             False\n",
       "selling_price    False\n",
       "km_driven        False\n",
       "fuel             False\n",
       "seller_type      False\n",
       "transmission     False\n",
       "owner            False\n",
       "mileage           True\n",
       "engine            True\n",
       "max_power         True\n",
       "torque            True\n",
       "seats             True\n",
       "dtype: bool"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.isnull().any()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>name</th>\n",
       "      <th>year</th>\n",
       "      <th>selling_price</th>\n",
       "      <th>km_driven</th>\n",
       "      <th>fuel</th>\n",
       "      <th>seller_type</th>\n",
       "      <th>transmission</th>\n",
       "      <th>owner</th>\n",
       "      <th>mileage</th>\n",
       "      <th>engine</th>\n",
       "      <th>max_power</th>\n",
       "      <th>torque</th>\n",
       "      <th>seats</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Maruti Swift Dzire VDI</td>\n",
       "      <td>2014</td>\n",
       "      <td>450000</td>\n",
       "      <td>145500</td>\n",
       "      <td>Diesel</td>\n",
       "      <td>Individual</td>\n",
       "      <td>Manual</td>\n",
       "      <td>First Owner</td>\n",
       "      <td>23.4 kmpl</td>\n",
       "      <td>1248 CC</td>\n",
       "      <td>74 bhp</td>\n",
       "      <td>190Nm@ 2000rpm</td>\n",
       "      <td>5.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Skoda Rapid 1.5 TDI Ambition</td>\n",
       "      <td>2014</td>\n",
       "      <td>370000</td>\n",
       "      <td>120000</td>\n",
       "      <td>Diesel</td>\n",
       "      <td>Individual</td>\n",
       "      <td>Manual</td>\n",
       "      <td>Second Owner</td>\n",
       "      <td>21.14 kmpl</td>\n",
       "      <td>1498 CC</td>\n",
       "      <td>103.52 bhp</td>\n",
       "      <td>250Nm@ 1500-2500rpm</td>\n",
       "      <td>5.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Honda City 2017-2020 EXi</td>\n",
       "      <td>2006</td>\n",
       "      <td>158000</td>\n",
       "      <td>140000</td>\n",
       "      <td>Petrol</td>\n",
       "      <td>Individual</td>\n",
       "      <td>Manual</td>\n",
       "      <td>Third Owner</td>\n",
       "      <td>17.7 kmpl</td>\n",
       "      <td>1497 CC</td>\n",
       "      <td>78 bhp</td>\n",
       "      <td>12.7@ 2,700(kgm@ rpm)</td>\n",
       "      <td>5.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Hyundai i20 Sportz Diesel</td>\n",
       "      <td>2010</td>\n",
       "      <td>225000</td>\n",
       "      <td>127000</td>\n",
       "      <td>Diesel</td>\n",
       "      <td>Individual</td>\n",
       "      <td>Manual</td>\n",
       "      <td>First Owner</td>\n",
       "      <td>23.0 kmpl</td>\n",
       "      <td>1396 CC</td>\n",
       "      <td>90 bhp</td>\n",
       "      <td>22.4 kgm at 1750-2750rpm</td>\n",
       "      <td>5.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Maruti Swift VXI BSIII</td>\n",
       "      <td>2007</td>\n",
       "      <td>130000</td>\n",
       "      <td>120000</td>\n",
       "      <td>Petrol</td>\n",
       "      <td>Individual</td>\n",
       "      <td>Manual</td>\n",
       "      <td>First Owner</td>\n",
       "      <td>16.1 kmpl</td>\n",
       "      <td>1298 CC</td>\n",
       "      <td>88.2 bhp</td>\n",
       "      <td>11.5@ 4,500(kgm@ rpm)</td>\n",
       "      <td>5.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8123</th>\n",
       "      <td>Hyundai i20 Magna</td>\n",
       "      <td>2013</td>\n",
       "      <td>320000</td>\n",
       "      <td>110000</td>\n",
       "      <td>Petrol</td>\n",
       "      <td>Individual</td>\n",
       "      <td>Manual</td>\n",
       "      <td>First Owner</td>\n",
       "      <td>18.5 kmpl</td>\n",
       "      <td>1197 CC</td>\n",
       "      <td>82.85 bhp</td>\n",
       "      <td>113.7Nm@ 4000rpm</td>\n",
       "      <td>5.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8124</th>\n",
       "      <td>Hyundai Verna CRDi SX</td>\n",
       "      <td>2007</td>\n",
       "      <td>135000</td>\n",
       "      <td>119000</td>\n",
       "      <td>Diesel</td>\n",
       "      <td>Individual</td>\n",
       "      <td>Manual</td>\n",
       "      <td>Fourth &amp; Above Owner</td>\n",
       "      <td>16.8 kmpl</td>\n",
       "      <td>1493 CC</td>\n",
       "      <td>110 bhp</td>\n",
       "      <td>24@ 1,900-2,750(kgm@ rpm)</td>\n",
       "      <td>5.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8125</th>\n",
       "      <td>Maruti Swift Dzire ZDi</td>\n",
       "      <td>2009</td>\n",
       "      <td>382000</td>\n",
       "      <td>120000</td>\n",
       "      <td>Diesel</td>\n",
       "      <td>Individual</td>\n",
       "      <td>Manual</td>\n",
       "      <td>First Owner</td>\n",
       "      <td>19.3 kmpl</td>\n",
       "      <td>1248 CC</td>\n",
       "      <td>73.9 bhp</td>\n",
       "      <td>190Nm@ 2000rpm</td>\n",
       "      <td>5.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8126</th>\n",
       "      <td>Tata Indigo CR4</td>\n",
       "      <td>2013</td>\n",
       "      <td>290000</td>\n",
       "      <td>25000</td>\n",
       "      <td>Diesel</td>\n",
       "      <td>Individual</td>\n",
       "      <td>Manual</td>\n",
       "      <td>First Owner</td>\n",
       "      <td>23.57 kmpl</td>\n",
       "      <td>1396 CC</td>\n",
       "      <td>70 bhp</td>\n",
       "      <td>140Nm@ 1800-3000rpm</td>\n",
       "      <td>5.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8127</th>\n",
       "      <td>Tata Indigo CR4</td>\n",
       "      <td>2013</td>\n",
       "      <td>290000</td>\n",
       "      <td>25000</td>\n",
       "      <td>Diesel</td>\n",
       "      <td>Individual</td>\n",
       "      <td>Manual</td>\n",
       "      <td>First Owner</td>\n",
       "      <td>23.57 kmpl</td>\n",
       "      <td>1396 CC</td>\n",
       "      <td>70 bhp</td>\n",
       "      <td>140Nm@ 1800-3000rpm</td>\n",
       "      <td>5.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>7906 rows × 13 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "                              name  year  selling_price  km_driven    fuel  \\\n",
       "0           Maruti Swift Dzire VDI  2014         450000     145500  Diesel   \n",
       "1     Skoda Rapid 1.5 TDI Ambition  2014         370000     120000  Diesel   \n",
       "2         Honda City 2017-2020 EXi  2006         158000     140000  Petrol   \n",
       "3        Hyundai i20 Sportz Diesel  2010         225000     127000  Diesel   \n",
       "4           Maruti Swift VXI BSIII  2007         130000     120000  Petrol   \n",
       "...                            ...   ...            ...        ...     ...   \n",
       "8123             Hyundai i20 Magna  2013         320000     110000  Petrol   \n",
       "8124         Hyundai Verna CRDi SX  2007         135000     119000  Diesel   \n",
       "8125        Maruti Swift Dzire ZDi  2009         382000     120000  Diesel   \n",
       "8126               Tata Indigo CR4  2013         290000      25000  Diesel   \n",
       "8127               Tata Indigo CR4  2013         290000      25000  Diesel   \n",
       "\n",
       "     seller_type transmission                 owner     mileage   engine  \\\n",
       "0     Individual       Manual           First Owner   23.4 kmpl  1248 CC   \n",
       "1     Individual       Manual          Second Owner  21.14 kmpl  1498 CC   \n",
       "2     Individual       Manual           Third Owner   17.7 kmpl  1497 CC   \n",
       "3     Individual       Manual           First Owner   23.0 kmpl  1396 CC   \n",
       "4     Individual       Manual           First Owner   16.1 kmpl  1298 CC   \n",
       "...          ...          ...                   ...         ...      ...   \n",
       "8123  Individual       Manual           First Owner   18.5 kmpl  1197 CC   \n",
       "8124  Individual       Manual  Fourth & Above Owner   16.8 kmpl  1493 CC   \n",
       "8125  Individual       Manual           First Owner   19.3 kmpl  1248 CC   \n",
       "8126  Individual       Manual           First Owner  23.57 kmpl  1396 CC   \n",
       "8127  Individual       Manual           First Owner  23.57 kmpl  1396 CC   \n",
       "\n",
       "       max_power                     torque  seats  \n",
       "0         74 bhp             190Nm@ 2000rpm    5.0  \n",
       "1     103.52 bhp        250Nm@ 1500-2500rpm    5.0  \n",
       "2         78 bhp      12.7@ 2,700(kgm@ rpm)    5.0  \n",
       "3         90 bhp   22.4 kgm at 1750-2750rpm    5.0  \n",
       "4       88.2 bhp      11.5@ 4,500(kgm@ rpm)    5.0  \n",
       "...          ...                        ...    ...  \n",
       "8123   82.85 bhp           113.7Nm@ 4000rpm    5.0  \n",
       "8124     110 bhp  24@ 1,900-2,750(kgm@ rpm)    5.0  \n",
       "8125    73.9 bhp             190Nm@ 2000rpm    5.0  \n",
       "8126      70 bhp        140Nm@ 1800-3000rpm    5.0  \n",
       "8127      70 bhp        140Nm@ 1800-3000rpm    5.0  \n",
       "\n",
       "[7906 rows x 13 columns]"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df=df.dropna()\n",
    "df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "name             0\n",
       "year             0\n",
       "selling_price    0\n",
       "km_driven        0\n",
       "fuel             0\n",
       "seller_type      0\n",
       "transmission     0\n",
       "owner            0\n",
       "mileage          0\n",
       "engine           0\n",
       "max_power        0\n",
       "torque           0\n",
       "seats            0\n",
       "dtype: int64"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.isnull().sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(7906, 13)"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>mileage</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>23.4 kmpl</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>21.14 kmpl</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>17.7 kmpl</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>23.0 kmpl</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>16.1 kmpl</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8123</th>\n",
       "      <td>18.5 kmpl</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8124</th>\n",
       "      <td>16.8 kmpl</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8125</th>\n",
       "      <td>19.3 kmpl</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8126</th>\n",
       "      <td>23.57 kmpl</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8127</th>\n",
       "      <td>23.57 kmpl</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>7906 rows × 1 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "         mileage\n",
       "0      23.4 kmpl\n",
       "1     21.14 kmpl\n",
       "2      17.7 kmpl\n",
       "3      23.0 kmpl\n",
       "4      16.1 kmpl\n",
       "...          ...\n",
       "8123   18.5 kmpl\n",
       "8124   16.8 kmpl\n",
       "8125   19.3 kmpl\n",
       "8126  23.57 kmpl\n",
       "8127  23.57 kmpl\n",
       "\n",
       "[7906 rows x 1 columns]"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "u=df.iloc[:,8:9]\n",
    "u"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([['23.4 kmpl'],\n",
       "       ['21.14 kmpl'],\n",
       "       ['17.7 kmpl'],\n",
       "       ...,\n",
       "       ['19.3 kmpl'],\n",
       "       ['23.57 kmpl'],\n",
       "       ['23.57 kmpl']], dtype=object)"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "h = u.to_numpy()\n",
    "h"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(7906, 1)"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "h.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "['23.4 kmpl',\n",
       " '21.14 kmpl',\n",
       " '17.7 kmpl',\n",
       " '23.0 kmpl',\n",
       " '16.1 kmpl',\n",
       " '20.14 kmpl',\n",
       " '17.3 km/kg',\n",
       " '16.1 kmpl',\n",
       " '23.59 kmpl',\n",
       " '20.0 kmpl',\n",
       " '19.01 kmpl',\n",
       " '17.3 kmpl',\n",
       " '19.3 kmpl',\n",
       " '18.9 kmpl',\n",
       " '18.15 kmpl',\n",
       " '24.52 kmpl',\n",
       " '23.0 kmpl',\n",
       " '19.7 kmpl',\n",
       " '22.54 kmpl',\n",
       " '21.0 kmpl',\n",
       " '25.5 kmpl',\n",
       " '26.59 kmpl',\n",
       " '21.5 kmpl',\n",
       " '20.3 kmpl',\n",
       " '21.4 kmpl',\n",
       " '24.7 kmpl',\n",
       " '18.2 kmpl',\n",
       " '18.9 kmpl',\n",
       " '16.8 kmpl',\n",
       " '24.3 kmpl',\n",
       " '14.0 kmpl',\n",
       " '18.6 kmpl',\n",
       " '24.3 kmpl',\n",
       " '33.44 km/kg',\n",
       " '23.95 kmpl',\n",
       " '17.0 kmpl',\n",
       " '20.63 kmpl',\n",
       " '13.93 kmpl',\n",
       " '16.1 kmpl',\n",
       " '16.0 kmpl',\n",
       " '17.8 kmpl',\n",
       " '16.8 kmpl',\n",
       " '18.5 kmpl',\n",
       " '24.3 kmpl',\n",
       " '23.95 kmpl',\n",
       " '12.55 kmpl',\n",
       " '12.99 kmpl',\n",
       " '14.8 kmpl',\n",
       " '24.7 kmpl',\n",
       " '13.5 kmpl',\n",
       " '26.0 kmpl',\n",
       " '20.65 kmpl',\n",
       " '27.3 kmpl',\n",
       " '11.36 kmpl',\n",
       " '12.99 kmpl',\n",
       " '17.68 kmpl',\n",
       " '14.28 kmpl',\n",
       " '18.53 kmpl',\n",
       " '14.84 kmpl',\n",
       " '21.12 kmpl',\n",
       " '20.36 kmpl',\n",
       " '21.27 kmpl',\n",
       " '26.59 kmpl',\n",
       " '18.16 kmpl',\n",
       " '21.4 kmpl',\n",
       " '22.0 kmpl',\n",
       " '25.1 kmpl',\n",
       " '20.51 kmpl',\n",
       " '21.66 kmpl',\n",
       " '24.3 kmpl',\n",
       " '24.3 kmpl',\n",
       " '20.36 kmpl',\n",
       " '25.2 kmpl',\n",
       " '12.55 kmpl',\n",
       " '22.9 kmpl',\n",
       " '16.02 kmpl',\n",
       " '20.54 kmpl',\n",
       " '12.99 kmpl',\n",
       " '22.77 kmpl',\n",
       " '15.71 kmpl',\n",
       " '23.1 kmpl',\n",
       " '19.02 kmpl',\n",
       " '24.7 kmpl',\n",
       " '24.7 kmpl',\n",
       " '19.81 kmpl',\n",
       " '14.0 kmpl',\n",
       " '26.2 km/kg',\n",
       " '16.47 kmpl',\n",
       " '19.81 kmpl',\n",
       " '15.04 kmpl',\n",
       " '18.2 kmpl',\n",
       " '18.5 kmpl',\n",
       " '26.59 kmpl',\n",
       " '19.1 kmpl',\n",
       " '19.7 kmpl',\n",
       " '22.54 kmpl',\n",
       " '21.79 kmpl',\n",
       " '18.8 kmpl',\n",
       " '21.21 kmpl',\n",
       " '15.37 kmpl',\n",
       " '21.4 kmpl',\n",
       " '11.79 kmpl',\n",
       " '19.0 kmpl',\n",
       " '17.0 kmpl',\n",
       " '14.3 kmpl',\n",
       " '15.8 kmpl',\n",
       " '15.1 kmpl',\n",
       " '19.09 kmpl',\n",
       " '22.32 kmpl',\n",
       " '21.9 kmpl',\n",
       " '14.53 kmpl',\n",
       " '21.63 kmpl',\n",
       " '24.3 kmpl',\n",
       " '20.85 kmpl',\n",
       " '20.51 kmpl',\n",
       " '20.45 kmpl',\n",
       " '19.67 kmpl',\n",
       " '23.0 kmpl',\n",
       " '19.3 kmpl',\n",
       " '23.01 kmpl',\n",
       " '23.1 kmpl',\n",
       " '19.7 kmpl',\n",
       " '20.77 kmpl',\n",
       " '17.92 kmpl',\n",
       " '20.77 kmpl',\n",
       " '17.8 kmpl',\n",
       " '17.01 kmpl',\n",
       " '22.37 kmpl',\n",
       " '19.33 kmpl',\n",
       " '9.5 kmpl',\n",
       " '12.83 kmpl',\n",
       " '13.5 kmpl',\n",
       " '22.48 kmpl',\n",
       " '16.78 kmpl',\n",
       " '14.67 kmpl',\n",
       " '15.0 kmpl',\n",
       " '13.96 kmpl',\n",
       " '18.0 kmpl',\n",
       " '14.28 kmpl',\n",
       " '18.0 kmpl',\n",
       " '12.07 kmpl',\n",
       " '26.21 kmpl',\n",
       " '13.5 kmpl',\n",
       " '10.8 kmpl',\n",
       " '16.3 kmpl',\n",
       " '13.6 kmpl',\n",
       " '17.0 kmpl',\n",
       " '15.04 kmpl',\n",
       " '16.3 kmpl',\n",
       " '14.3 kmpl',\n",
       " '15.04 kmpl',\n",
       " '16.02 kmpl',\n",
       " '14.74 kmpl',\n",
       " '15.6 kmpl',\n",
       " '19.56 kmpl',\n",
       " '23.95 kmpl',\n",
       " '21.21 kmpl',\n",
       " '11.36 kmpl',\n",
       " '21.5 kmpl',\n",
       " '22.69 kmpl',\n",
       " '19.16 kmpl',\n",
       " '18.12 kmpl',\n",
       " '12.1 kmpl',\n",
       " '17.5 kmpl',\n",
       " '42.0 kmpl',\n",
       " '20.54 kmpl',\n",
       " '18.16 kmpl',\n",
       " '20.0 kmpl',\n",
       " '20.4 kmpl',\n",
       " '20.51 kmpl',\n",
       " '18.6 kmpl',\n",
       " '16.1 kmpl',\n",
       " '21.1 kmpl',\n",
       " '18.9 kmpl',\n",
       " '19.44 kmpl',\n",
       " '18.9 kmpl',\n",
       " '19.1 kmpl',\n",
       " '19.1 kmpl',\n",
       " '13.0 kmpl',\n",
       " '21.43 kmpl',\n",
       " '18.5 kmpl',\n",
       " '13.0 kmpl',\n",
       " '18.15 kmpl',\n",
       " '22.95 kmpl',\n",
       " '17.0 kmpl',\n",
       " '17.3 kmpl',\n",
       " '18.9 kmpl',\n",
       " '16.2 kmpl',\n",
       " '20.85 kmpl',\n",
       " '15.3 kmpl',\n",
       " '18.6 kmpl',\n",
       " '28.09 kmpl',\n",
       " '20.3 kmpl',\n",
       " '20.77 kmpl',\n",
       " '17.4 kmpl',\n",
       " '19.4 kmpl',\n",
       " '26.6 km/kg',\n",
       " '20.85 kmpl',\n",
       " '18.5 kmpl',\n",
       " '20.51 kmpl',\n",
       " '21.21 kmpl',\n",
       " '24.7 kmpl',\n",
       " '22.0 kmpl',\n",
       " '20.4 kmpl',\n",
       " '17.6 kmpl',\n",
       " '18.5 kmpl',\n",
       " '28.4 kmpl',\n",
       " '20.51 kmpl',\n",
       " '14.53 kmpl',\n",
       " '19.4 kmpl',\n",
       " '21.4 kmpl',\n",
       " '14.1 kmpl',\n",
       " '19.7 kmpl',\n",
       " '25.17 kmpl',\n",
       " '20.63 kmpl',\n",
       " '24.3 kmpl',\n",
       " '20.14 kmpl',\n",
       " '22.74 kmpl',\n",
       " '17.0 kmpl',\n",
       " '17.57 kmpl',\n",
       " '16.95 kmpl',\n",
       " '17.0 kmpl',\n",
       " '19.49 kmpl',\n",
       " '20.51 kmpl',\n",
       " '12.83 kmpl',\n",
       " '17.21 kmpl',\n",
       " '21.1 kmpl',\n",
       " '19.67 kmpl',\n",
       " '25.17 kmpl',\n",
       " '20.77 kmpl',\n",
       " '15.1 kmpl',\n",
       " '15.37 kmpl',\n",
       " '17.92 kmpl',\n",
       " '13.2 kmpl',\n",
       " '15.1 kmpl',\n",
       " '12.99 kmpl',\n",
       " '23.4 kmpl',\n",
       " '19.0 kmpl',\n",
       " '20.36 kmpl',\n",
       " '23.4 kmpl',\n",
       " '24.52 kmpl',\n",
       " '14.2 kmpl',\n",
       " '18.5 kmpl',\n",
       " '20.4 kmpl',\n",
       " '19.4 kmpl',\n",
       " '22.54 kmpl',\n",
       " '26.8 kmpl',\n",
       " '17.6 kmpl',\n",
       " '17.3 kmpl',\n",
       " '22.32 kmpl',\n",
       " '23.4 kmpl',\n",
       " '19.3 kmpl',\n",
       " '26.0 kmpl',\n",
       " '19.3 kmpl',\n",
       " '25.4 kmpl',\n",
       " '11.5 kmpl',\n",
       " '27.28 kmpl',\n",
       " '17.97 kmpl',\n",
       " '18.6 kmpl',\n",
       " '20.85 kmpl',\n",
       " '12.8 kmpl',\n",
       " '16.55 kmpl',\n",
       " '19.3 kmpl',\n",
       " '20.4 kmpl',\n",
       " '19.02 kmpl',\n",
       " '22.54 kmpl',\n",
       " '12.05 kmpl',\n",
       " '14.07 kmpl',\n",
       " '27.28 kmpl',\n",
       " '17.57 kmpl',\n",
       " '13.2 kmpl',\n",
       " '19.4 kmpl',\n",
       " '18.9 kmpl',\n",
       " '21.02 kmpl',\n",
       " '19.7 kmpl',\n",
       " '11.57 kmpl',\n",
       " '13.6 kmpl',\n",
       " '13.6 kmpl',\n",
       " '17.9 kmpl',\n",
       " '16.8 kmpl',\n",
       " '18.9 kmpl',\n",
       " '18.9 kmpl',\n",
       " '16.95 kmpl',\n",
       " '20.4 kmpl',\n",
       " '16.95 kmpl',\n",
       " '18.6 kmpl',\n",
       " '18.6 kmpl',\n",
       " '15.96 kmpl',\n",
       " '17.1 kmpl',\n",
       " '17.19 kmpl',\n",
       " '21.01 kmpl',\n",
       " '17.0 kmpl',\n",
       " '19.7 kmpl',\n",
       " '26.59 kmpl',\n",
       " '19.1 kmpl',\n",
       " '24.0 kmpl',\n",
       " '19.1 kmpl',\n",
       " '18.6 kmpl',\n",
       " '20.3 kmpl',\n",
       " '16.1 kmpl',\n",
       " '25.6 kmpl',\n",
       " '25.6 kmpl',\n",
       " '16.02 kmpl',\n",
       " '19.01 kmpl',\n",
       " '17.4 kmpl',\n",
       " '25.17 kmpl',\n",
       " '12.99 kmpl',\n",
       " '20.51 kmpl',\n",
       " '21.38 kmpl',\n",
       " '23.84 kmpl',\n",
       " '24.0 kmpl',\n",
       " '21.4 kmpl',\n",
       " '16.1 kmpl',\n",
       " '17.4 kmpl',\n",
       " '20.4 kmpl',\n",
       " '17.0 kmpl',\n",
       " '17.3 kmpl',\n",
       " '23.1 kmpl',\n",
       " '12.8 kmpl',\n",
       " '21.1 kmpl',\n",
       " '23.08 kmpl',\n",
       " '17.3 kmpl',\n",
       " '17.1 kmpl',\n",
       " '18.2 kmpl',\n",
       " '19.7 kmpl',\n",
       " '19.3 kmpl',\n",
       " '19.0 kmpl',\n",
       " '20.77 kmpl',\n",
       " '17.8 kmpl',\n",
       " '23.08 kmpl',\n",
       " '18.9 kmpl',\n",
       " '20.0 kmpl',\n",
       " '17.0 kmpl',\n",
       " '17.01 kmpl',\n",
       " '22.0 kmpl',\n",
       " '20.63 kmpl',\n",
       " '18.9 kmpl',\n",
       " '14.24 kmpl',\n",
       " '20.71 kmpl',\n",
       " '18.5 kmpl',\n",
       " '17.0 kmpl',\n",
       " '16.95 kmpl',\n",
       " '23.59 kmpl',\n",
       " '20.36 kmpl',\n",
       " '20.45 kmpl',\n",
       " '15.1 kmpl',\n",
       " '12.8 kmpl',\n",
       " '15.64 kmpl',\n",
       " '14.5 kmpl',\n",
       " '14.84 kmpl',\n",
       " '25.4 kmpl',\n",
       " '23.08 kmpl',\n",
       " '18.9 kmpl',\n",
       " '26.59 kmpl',\n",
       " '20.36 kmpl',\n",
       " '25.17 kmpl',\n",
       " '16.34 kmpl',\n",
       " '13.6 kmpl',\n",
       " '22.37 kmpl',\n",
       " '19.33 kmpl',\n",
       " '14.1 kmpl',\n",
       " '18.0 kmpl',\n",
       " '19.16 kmpl',\n",
       " '21.79 kmpl',\n",
       " '27.39 kmpl',\n",
       " '18.2 kmpl',\n",
       " '12.99 kmpl',\n",
       " '22.0 kmpl',\n",
       " '16.78 kmpl',\n",
       " '22.0 kmpl',\n",
       " '24.0 kmpl',\n",
       " '16.78 kmpl',\n",
       " '16.78 kmpl',\n",
       " '19.0 kmpl',\n",
       " '14.3 kmpl',\n",
       " '16.8 kmpl',\n",
       " '20.36 kmpl',\n",
       " '11.1 kmpl',\n",
       " '26.59 kmpl',\n",
       " '22.32 kmpl',\n",
       " '12.8 kmpl',\n",
       " '21.5 kmpl',\n",
       " '13.9 kmpl',\n",
       " '16.8 kmpl',\n",
       " '22.74 kmpl',\n",
       " '18.0 kmpl',\n",
       " '28.4 kmpl',\n",
       " '17.0 kmpl',\n",
       " '20.88 km/kg',\n",
       " '23.95 kmpl',\n",
       " '16.0 kmpl',\n",
       " '20.92 kmpl',\n",
       " '21.1 kmpl',\n",
       " '23.84 kmpl',\n",
       " '15.1 kmpl',\n",
       " '13.6 kmpl',\n",
       " '22.37 kmpl',\n",
       " '19.33 kmpl',\n",
       " '14.1 kmpl',\n",
       " '18.0 kmpl',\n",
       " '19.16 kmpl',\n",
       " '21.79 kmpl',\n",
       " '27.39 kmpl',\n",
       " '18.2 kmpl',\n",
       " '12.99 kmpl',\n",
       " '22.0 kmpl',\n",
       " '16.78 kmpl',\n",
       " '22.0 kmpl',\n",
       " '24.0 kmpl',\n",
       " '16.78 kmpl',\n",
       " '16.78 kmpl',\n",
       " '19.0 kmpl',\n",
       " '14.3 kmpl',\n",
       " '16.8 kmpl',\n",
       " '23.8 kmpl',\n",
       " '21.38 kmpl',\n",
       " '19.7 kmpl',\n",
       " '24.4 kmpl',\n",
       " '12.99 kmpl',\n",
       " '23.59 kmpl',\n",
       " '28.4 kmpl',\n",
       " '12.8 kmpl',\n",
       " '23.08 kmpl',\n",
       " '16.1 kmpl',\n",
       " '23.4 kmpl',\n",
       " '20.14 kmpl',\n",
       " '21.0 kmpl',\n",
       " '16.1 kmpl',\n",
       " '25.2 kmpl',\n",
       " '19.1 kmpl',\n",
       " '16.1 kmpl',\n",
       " '23.1 kmpl',\n",
       " '20.0 kmpl',\n",
       " '13.93 kmpl',\n",
       " '18.16 kmpl',\n",
       " '23.1 kmpl',\n",
       " '15.29 kmpl',\n",
       " '21.21 kmpl',\n",
       " '17.6 kmpl',\n",
       " '23.0 kmpl',\n",
       " '21.19 kmpl',\n",
       " '22.54 kmpl',\n",
       " '23.8 kmpl',\n",
       " '15.96 kmpl',\n",
       " '20.45 kmpl',\n",
       " '20.4 kmpl',\n",
       " '22.5 kmpl',\n",
       " '12.99 kmpl',\n",
       " '18.6 kmpl',\n",
       " '12.99 kmpl',\n",
       " '27.39 kmpl',\n",
       " '19.6 kmpl',\n",
       " '18.2 kmpl',\n",
       " '23.65 kmpl',\n",
       " '12.55 kmpl',\n",
       " '26.59 kmpl',\n",
       " '12.55 kmpl',\n",
       " '11.5 kmpl',\n",
       " '17.0 kmpl',\n",
       " '19.49 kmpl',\n",
       " '16.2 kmpl',\n",
       " '25.32 kmpl',\n",
       " '16.02 kmpl',\n",
       " '23.5 kmpl',\n",
       " '16.6 kmpl',\n",
       " '19.81 kmpl',\n",
       " '19.0 kmpl',\n",
       " '18.9 kmpl',\n",
       " '23.9 kmpl',\n",
       " '24.52 kmpl',\n",
       " '25.2 kmpl',\n",
       " '17.01 kmpl',\n",
       " '25.2 kmpl',\n",
       " '25.32 kmpl',\n",
       " '20.8 kmpl',\n",
       " '20.14 kmpl',\n",
       " '18.5 kmpl',\n",
       " '22.74 kmpl',\n",
       " '27.62 kmpl',\n",
       " '17.5 kmpl',\n",
       " '20.54 kmpl',\n",
       " '18.6 kmpl',\n",
       " '23.59 kmpl',\n",
       " '18.9 kmpl',\n",
       " '28.4 kmpl',\n",
       " '12.9 kmpl',\n",
       " '17.5 kmpl',\n",
       " '24.7 kmpl',\n",
       " '22.74 kmpl',\n",
       " '25.44 kmpl',\n",
       " '23.84 kmpl',\n",
       " '25.44 kmpl',\n",
       " '13.93 kmpl',\n",
       " '15.6 kmpl',\n",
       " '17.88 kmpl',\n",
       " '26.59 kmpl',\n",
       " '28.4 kmpl',\n",
       " '22.7 kmpl',\n",
       " '20.92 kmpl',\n",
       " '19.3 kmpl',\n",
       " '17.2 kmpl',\n",
       " '13.6 kmpl',\n",
       " '18.6 kmpl',\n",
       " '21.1 kmpl',\n",
       " '15.37 kmpl',\n",
       " '17.5 kmpl',\n",
       " '19.1 kmpl',\n",
       " '18.6 kmpl',\n",
       " '23.84 kmpl',\n",
       " '18.2 kmpl',\n",
       " '19.7 kmpl',\n",
       " '17.1 kmpl',\n",
       " '17.4 kmpl',\n",
       " '20.54 kmpl',\n",
       " '20.92 kmpl',\n",
       " '18.6 kmpl',\n",
       " '15.42 kmpl',\n",
       " '16.02 kmpl',\n",
       " '18.5 kmpl',\n",
       " '21.1 kmpl',\n",
       " '15.3 kmpl',\n",
       " '19.7 kmpl',\n",
       " '18.2 kmpl',\n",
       " '17.57 kmpl',\n",
       " '19.68 kmpl',\n",
       " '19.7 kmpl',\n",
       " '12.99 kmpl',\n",
       " '13.6 kmpl',\n",
       " '22.74 kmpl',\n",
       " '20.51 kmpl',\n",
       " '19.3 kmpl',\n",
       " '14.1 kmpl',\n",
       " '24.3 kmpl',\n",
       " '11.36 kmpl',\n",
       " '19.67 kmpl',\n",
       " '24.3 kmpl',\n",
       " '18.6 kmpl',\n",
       " '18.9 kmpl',\n",
       " '18.7 kmpl',\n",
       " '15.4 kmpl',\n",
       " '17.7 kmpl',\n",
       " '19.34 kmpl',\n",
       " '18.16 kmpl',\n",
       " '21.1 kmpl',\n",
       " '22.7 kmpl',\n",
       " '19.0 kmpl',\n",
       " '20.3 kmpl',\n",
       " '23.0 kmpl',\n",
       " '22.71 kmpl',\n",
       " '18.9 kmpl',\n",
       " '23.65 kmpl',\n",
       " '23.0 kmpl',\n",
       " '17.1 kmpl',\n",
       " '20.77 kmpl',\n",
       " '18.8 kmpl',\n",
       " '18.9 kmpl',\n",
       " '21.14 kmpl',\n",
       " '22.32 kmpl',\n",
       " '15.4 kmpl',\n",
       " '19.01 kmpl',\n",
       " '15.1 kmpl',\n",
       " '24.7 kmpl',\n",
       " '20.0 kmpl',\n",
       " '20.36 kmpl',\n",
       " '21.21 kmpl',\n",
       " '15.96 kmpl',\n",
       " '20.51 kmpl',\n",
       " '21.1 kmpl',\n",
       " '12.8 kmpl',\n",
       " '13.5 kmpl',\n",
       " '25.44 kmpl',\n",
       " '21.66 kmpl',\n",
       " '17.6 kmpl',\n",
       " '21.1 kmpl',\n",
       " '25.17 kmpl',\n",
       " '19.0 kmpl',\n",
       " '12.99 kmpl',\n",
       " '18.2 kmpl',\n",
       " '22.32 kmpl',\n",
       " '25.8 kmpl',\n",
       " '22.0 kmpl',\n",
       " '14.24 kmpl',\n",
       " '15.8 kmpl',\n",
       " '18.9 kmpl',\n",
       " '13.7 kmpl',\n",
       " '12.2 kmpl',\n",
       " '18.8 kmpl',\n",
       " '19.81 kmpl',\n",
       " '19.09 kmpl',\n",
       " '23.01 kmpl',\n",
       " '13.6 kmpl',\n",
       " '18.49 kmpl',\n",
       " '26.59 kmpl',\n",
       " '22.74 kmpl',\n",
       " '24.52 kmpl',\n",
       " '24.0 kmpl',\n",
       " '20.0 kmpl',\n",
       " '16.8 kmpl',\n",
       " '18.9 kmpl',\n",
       " '19.81 kmpl',\n",
       " '17.57 kmpl',\n",
       " '23.95 kmpl',\n",
       " '24.52 kmpl',\n",
       " '14.1 kmpl',\n",
       " '23.95 kmpl',\n",
       " '24.0 kmpl',\n",
       " '25.17 kmpl',\n",
       " '22.9 kmpl',\n",
       " '15.96 kmpl',\n",
       " '9.0 kmpl',\n",
       " '23.95 kmpl',\n",
       " '23.4 kmpl',\n",
       " '21.1 kmpl',\n",
       " '15.4 kmpl',\n",
       " '23.95 kmpl',\n",
       " '24.0 kmpl',\n",
       " '22.77 kmpl',\n",
       " '20.51 kmpl',\n",
       " '15.96 kmpl',\n",
       " '23.0 kmpl',\n",
       " '22.95 kmpl',\n",
       " '16.55 kmpl',\n",
       " '14.0 kmpl',\n",
       " '14.0 kmpl',\n",
       " '18.9 kmpl',\n",
       " '0.0 kmpl',\n",
       " '18.9 kmpl',\n",
       " '13.6 kmpl',\n",
       " '22.37 kmpl',\n",
       " '19.33 kmpl',\n",
       " '14.1 kmpl',\n",
       " '18.0 kmpl',\n",
       " '19.16 kmpl',\n",
       " '21.79 kmpl',\n",
       " '27.39 kmpl',\n",
       " '18.2 kmpl',\n",
       " '12.99 kmpl',\n",
       " '22.0 kmpl',\n",
       " '16.78 kmpl',\n",
       " '22.0 kmpl',\n",
       " '24.0 kmpl',\n",
       " '16.78 kmpl',\n",
       " '16.78 kmpl',\n",
       " '19.0 kmpl',\n",
       " '14.3 kmpl',\n",
       " '16.8 kmpl',\n",
       " '18.49 kmpl',\n",
       " '19.0 kmpl',\n",
       " '20.36 kmpl',\n",
       " '16.55 kmpl',\n",
       " '20.3 kmpl',\n",
       " '19.7 kmpl',\n",
       " '17.1 kmpl',\n",
       " '25.1 kmpl',\n",
       " '18.49 kmpl',\n",
       " '19.0 kmpl',\n",
       " '19.1 kmpl',\n",
       " '18.15 kmpl',\n",
       " '19.0 kmpl',\n",
       " '21.21 kmpl',\n",
       " '23.0 kmpl',\n",
       " '17.8 kmpl',\n",
       " '13.0 kmpl',\n",
       " '11.5 kmpl',\n",
       " '18.15 kmpl',\n",
       " '20.54 kmpl',\n",
       " '18.16 kmpl',\n",
       " '15.96 kmpl',\n",
       " '17.92 kmpl',\n",
       " '17.92 kmpl',\n",
       " '22.71 kmpl',\n",
       " '17.92 kmpl',\n",
       " '20.51 kmpl',\n",
       " '19.81 kmpl',\n",
       " '14.0 kmpl',\n",
       " '18.9 kmpl',\n",
       " '19.09 kmpl',\n",
       " '13.6 kmpl',\n",
       " '28.4 kmpl',\n",
       " '17.8 kmpl',\n",
       " '23.01 kmpl',\n",
       " '14.0 kmpl',\n",
       " '18.9 kmpl',\n",
       " '13.6 kmpl',\n",
       " '18.49 kmpl',\n",
       " '21.1 kmpl',\n",
       " '19.0 kmpl',\n",
       " '23.1 kmpl',\n",
       " '21.1 kmpl',\n",
       " '26.0 kmpl',\n",
       " '13.6 kmpl',\n",
       " '13.58 kmpl',\n",
       " '22.54 kmpl',\n",
       " '18.6 kmpl',\n",
       " '18.49 kmpl',\n",
       " '13.5 kmpl',\n",
       " '10.1 kmpl',\n",
       " '20.63 kmpl',\n",
       " '18.15 kmpl',\n",
       " '21.9 kmpl',\n",
       " '23.1 kmpl',\n",
       " '13.2 kmpl',\n",
       " '15.96 kmpl',\n",
       " '19.09 kmpl',\n",
       " '15.96 kmpl',\n",
       " '13.6 kmpl',\n",
       " '15.96 kmpl',\n",
       " '16.95 kmpl',\n",
       " '21.02 kmpl',\n",
       " '24.4 kmpl',\n",
       " '20.14 kmpl',\n",
       " '19.0 kmpl',\n",
       " '20.5 kmpl',\n",
       " '15.96 kmpl',\n",
       " '13.6 kmpl',\n",
       " '12.99 kmpl',\n",
       " '18.9 kmpl',\n",
       " '23.01 kmpl',\n",
       " '20.14 kmpl',\n",
       " '18.6 kmpl',\n",
       " '20.4 kmpl',\n",
       " '16.0 kmpl',\n",
       " '16.8 kmpl',\n",
       " '18.9 kmpl',\n",
       " '27.28 kmpl',\n",
       " '23.95 kmpl',\n",
       " '15.37 kmpl',\n",
       " '12.05 kmpl',\n",
       " '12.8 kmpl',\n",
       " '25.0 kmpl',\n",
       " '18.16 kmpl',\n",
       " '10.5 kmpl',\n",
       " '21.1 kmpl',\n",
       " '21.1 kmpl',\n",
       " '19.7 kmpl',\n",
       " '17.88 kmpl',\n",
       " '24.3 kmpl',\n",
       " '22.07 kmpl',\n",
       " '18.9 kmpl',\n",
       " '13.0 kmpl',\n",
       " '15.96 kmpl',\n",
       " '20.4 kmpl',\n",
       " '24.0 kmpl',\n",
       " '19.3 kmpl',\n",
       " '23.0 kmpl',\n",
       " '14.0 kmpl',\n",
       " '17.8 kmpl',\n",
       " '15.4 kmpl',\n",
       " '23.95 kmpl',\n",
       " '13.5 kmpl',\n",
       " '22.3 kmpl',\n",
       " '12.8 kmpl',\n",
       " '18.9 kmpl',\n",
       " '19.0 kmpl',\n",
       " '15.1 kmpl',\n",
       " '15.26 kmpl',\n",
       " '13.6 kmpl',\n",
       " '10.5 kmpl',\n",
       " '0.0 kmpl',\n",
       " '22.7 kmpl',\n",
       " '13.6 kmpl',\n",
       " '19.1 kmpl',\n",
       " '19.09 kmpl',\n",
       " '19.0 kmpl',\n",
       " '16.1 kmpl',\n",
       " '12.9 kmpl',\n",
       " '15.1 kmpl',\n",
       " '19.7 kmpl',\n",
       " '12.2 kmpl',\n",
       " '22.9 kmpl',\n",
       " '20.62 kmpl',\n",
       " '19.3 kmpl',\n",
       " '23.01 kmpl',\n",
       " '18.2 kmpl',\n",
       " '20.51 kmpl',\n",
       " '20.4 kmpl',\n",
       " '21.1 kmpl',\n",
       " '19.01 kmpl',\n",
       " '17.7 kmpl',\n",
       " '20.3 kmpl',\n",
       " '19.3 kmpl',\n",
       " '16.1 kmpl',\n",
       " '27.4 kmpl',\n",
       " '16.02 kmpl',\n",
       " '18.8 kmpl',\n",
       " '16.02 kmpl',\n",
       " '18.6 kmpl',\n",
       " '16.8 kmpl',\n",
       " '18.8 kmpl',\n",
       " '13.6 kmpl',\n",
       " '19.7 kmpl',\n",
       " '19.7 kmpl',\n",
       " '25.8 kmpl',\n",
       " '12.99 kmpl',\n",
       " '21.1 kmpl',\n",
       " '20.51 kmpl',\n",
       " '21.4 kmpl',\n",
       " '18.5 kmpl',\n",
       " '23.2 kmpl',\n",
       " '19.67 kmpl',\n",
       " '20.85 kmpl',\n",
       " '23.9 kmpl',\n",
       " '16.0 kmpl',\n",
       " '18.6 kmpl',\n",
       " '17.8 kmpl',\n",
       " '22.74 kmpl',\n",
       " '22.74 kmpl',\n",
       " '22.77 kmpl',\n",
       " '20.8 kmpl',\n",
       " '20.51 kmpl',\n",
       " '20.51 kmpl',\n",
       " '14.07 kmpl',\n",
       " '19.0 kmpl',\n",
       " '14.4 kmpl',\n",
       " '18.5 kmpl',\n",
       " '17.0 kmpl',\n",
       " '19.81 kmpl',\n",
       " '18.9 kmpl',\n",
       " '16.6 kmpl',\n",
       " '18.15 kmpl',\n",
       " '19.81 kmpl',\n",
       " '28.4 kmpl',\n",
       " '18.4 kmpl',\n",
       " '19.7 kmpl',\n",
       " '12.05 kmpl',\n",
       " '16.8 kmpl',\n",
       " '20.3 kmpl',\n",
       " '28.4 kmpl',\n",
       " '20.77 kmpl',\n",
       " '12.8 kmpl',\n",
       " '23.01 kmpl',\n",
       " '18.2 kmpl',\n",
       " '16.8 kmpl',\n",
       " '18.6 kmpl',\n",
       " '25.17 kmpl',\n",
       " '22.32 kmpl',\n",
       " '24.7 kmpl',\n",
       " '20.77 kmpl',\n",
       " '30.46 km/kg',\n",
       " '25.17 kmpl',\n",
       " '21.1 kmpl',\n",
       " '26.59 kmpl',\n",
       " '26.2 km/kg',\n",
       " '21.43 kmpl',\n",
       " '18.5 kmpl',\n",
       " '18.6 kmpl',\n",
       " '21.12 kmpl',\n",
       " '14.02 kmpl',\n",
       " '17.0 kmpl',\n",
       " '14.02 kmpl',\n",
       " '19.09 kmpl',\n",
       " '17.8 kmpl',\n",
       " '23.1 kmpl',\n",
       " '20.0 kmpl',\n",
       " '25.44 kmpl',\n",
       " '11.0 kmpl',\n",
       " '25.17 kmpl',\n",
       " '18.2 kmpl',\n",
       " '13.6 kmpl',\n",
       " '19.09 kmpl',\n",
       " '13.2 kmpl',\n",
       " '17.7 kmpl',\n",
       " '15.96 kmpl',\n",
       " '15.4 kmpl',\n",
       " '20.6 kmpl',\n",
       " '20.0 kmpl',\n",
       " '13.6 kmpl',\n",
       " '19.09 kmpl',\n",
       " '25.5 kmpl',\n",
       " '17.7 kmpl',\n",
       " '21.9 kmpl',\n",
       " '24.3 kmpl',\n",
       " '18.6 kmpl',\n",
       " '16.1 kmpl',\n",
       " '20.0 kmpl',\n",
       " '12.8 kmpl',\n",
       " '11.5 kmpl',\n",
       " '17.0 kmpl',\n",
       " '16.55 kmpl',\n",
       " '23.59 kmpl',\n",
       " '18.9 kmpl',\n",
       " '18.5 kmpl',\n",
       " '21.1 kmpl',\n",
       " '22.95 kmpl',\n",
       " '22.3 kmpl',\n",
       " '21.1 kmpl',\n",
       " '24.0 kmpl',\n",
       " '15.1 kmpl',\n",
       " '20.62 kmpl',\n",
       " '19.3 kmpl',\n",
       " '18.49 kmpl',\n",
       " '21.9 kmpl',\n",
       " '22.05 kmpl',\n",
       " '25.17 kmpl',\n",
       " '19.01 kmpl',\n",
       " '21.19 kmpl',\n",
       " '18.49 kmpl',\n",
       " '15.96 kmpl',\n",
       " '12.99 kmpl',\n",
       " '24.7 kmpl',\n",
       " '25.1 kmpl',\n",
       " '20.3 kmpl',\n",
       " '20.77 kmpl',\n",
       " '25.2 kmpl',\n",
       " '20.2 kmpl',\n",
       " '25.44 kmpl',\n",
       " '21.19 kmpl',\n",
       " '21.5 kmpl',\n",
       " '18.9 kmpl',\n",
       " '25.0 kmpl',\n",
       " '16.1 kmpl',\n",
       " '22.32 kmpl',\n",
       " '18.1 kmpl',\n",
       " '13.93 kmpl',\n",
       " '17.3 kmpl',\n",
       " '17.8 kmpl',\n",
       " '22.1 kmpl',\n",
       " '19.3 kmpl',\n",
       " '23.4 kmpl',\n",
       " '25.44 kmpl',\n",
       " '18.4 kmpl',\n",
       " '20.0 kmpl',\n",
       " '16.8 kmpl',\n",
       " '20.8 kmpl',\n",
       " '21.21 kmpl',\n",
       " '19.87 kmpl',\n",
       " '20.0 kmpl',\n",
       " '24.3 kmpl',\n",
       " '20.77 kmpl',\n",
       " '15.37 kmpl',\n",
       " '18.2 kmpl',\n",
       " '15.1 kmpl',\n",
       " '12.8 kmpl',\n",
       " '22.54 kmpl',\n",
       " '13.6 kmpl',\n",
       " '12.99 kmpl',\n",
       " '12.8 kmpl',\n",
       " '21.4 kmpl',\n",
       " '19.7 kmpl',\n",
       " '25.2 kmpl',\n",
       " '20.54 kmpl',\n",
       " '23.2 kmpl',\n",
       " '11.36 kmpl',\n",
       " '14.0 kmpl',\n",
       " '19.4 kmpl',\n",
       " '22.7 kmpl',\n",
       " '22.1 kmpl',\n",
       " '15.3 kmpl',\n",
       " '18.9 kmpl',\n",
       " '22.54 kmpl',\n",
       " '22.54 kmpl',\n",
       " '22.07 kmpl',\n",
       " '17.88 kmpl',\n",
       " '17.5 kmpl',\n",
       " '20.92 kmpl',\n",
       " '18.4 kmpl',\n",
       " '13.01 kmpl',\n",
       " '18.06 kmpl',\n",
       " '18.0 kmpl',\n",
       " '28.4 kmpl',\n",
       " '17.0 kmpl',\n",
       " '13.58 kmpl',\n",
       " '20.77 kmpl',\n",
       " '15.4 kmpl',\n",
       " '16.1 kmpl',\n",
       " '14.0 kmpl',\n",
       " '20.51 kmpl',\n",
       " '16.8 kmpl',\n",
       " '13.93 kmpl',\n",
       " '18.9 kmpl',\n",
       " '16.1 kmpl',\n",
       " '25.17 kmpl',\n",
       " '15.96 kmpl',\n",
       " '25.1 kmpl',\n",
       " '16.2 kmpl',\n",
       " '13.9 kmpl',\n",
       " '12.99 kmpl',\n",
       " '24.7 kmpl',\n",
       " '12.99 kmpl',\n",
       " '17.8 kmpl',\n",
       " '20.0 kmpl',\n",
       " '26.1 kmpl',\n",
       " '22.7 kmpl',\n",
       " '17.8 kmpl',\n",
       " '25.5 kmpl',\n",
       " '15.1 kmpl',\n",
       " '22.77 kmpl',\n",
       " '17.0 kmpl',\n",
       " '23.84 kmpl',\n",
       " '15.4 kmpl',\n",
       " '21.5 kmpl',\n",
       " '17.0 kmpl',\n",
       " '23.2 kmpl',\n",
       " '17.8 kmpl',\n",
       " '16.8 kmpl',\n",
       " '19.7 kmpl',\n",
       " '23.1 kmpl',\n",
       " '16.52 kmpl',\n",
       " '19.81 kmpl',\n",
       " '21.38 kmpl',\n",
       " ...]"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "vv = df['mileage'].tolist()\n",
    "vv"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "list"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "type(vv)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "7906"
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "vvv=[]\n",
    "for i in range(len(vv)):\n",
    "    r=vv[i]\n",
    "    if r[-4:]==\"kmpl\":\n",
    "        x=r.strip(\" kmpl\")\n",
    "    if r[-5:]==\"km/kg\":\n",
    "        x=r.strip(\" km/kg\")\n",
    "    y=float(x)\n",
    "    vvv.append(y)\n",
    "len(vvv)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'kmpl'"
      ]
     },
     "execution_count": 14,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "s=\"17.33 km/kg\"\n",
    "ss=\"17.33 kmpl\"\n",
    "ss[-4:]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "['1248 CC',\n",
       " '1498 CC',\n",
       " '1497 CC',\n",
       " '1396 CC',\n",
       " '1298 CC',\n",
       " '1197 CC',\n",
       " '1061 CC',\n",
       " '796 CC',\n",
       " '1364 CC',\n",
       " '1399 CC',\n",
       " '1461 CC',\n",
       " '993 CC',\n",
       " '1248 CC',\n",
       " '1061 CC',\n",
       " '1198 CC',\n",
       " '1248 CC',\n",
       " '1396 CC',\n",
       " '796 CC',\n",
       " '1396 CC',\n",
       " '1461 CC',\n",
       " '1498 CC',\n",
       " '1248 CC',\n",
       " '1248 CC',\n",
       " '1199 CC',\n",
       " '1197 CC',\n",
       " '796 CC',\n",
       " '1248 CC',\n",
       " '1061 CC',\n",
       " '796 CC',\n",
       " '1248 CC',\n",
       " '796 CC',\n",
       " '1197 CC',\n",
       " '1248 CC',\n",
       " '796 CC',\n",
       " '998 CC',\n",
       " '1591 CC',\n",
       " '1198 CC',\n",
       " '2179 CC',\n",
       " '796 CC',\n",
       " '1368 CC',\n",
       " '1497 CC',\n",
       " '1497 CC',\n",
       " '1197 CC',\n",
       " '1248 CC',\n",
       " '998 CC',\n",
       " '2982 CC',\n",
       " '2494 CC',\n",
       " '2143 CC',\n",
       " '1498 CC',\n",
       " '2477 CC',\n",
       " '1498 CC',\n",
       " '1462 CC',\n",
       " '1498 CC',\n",
       " '2755 CC',\n",
       " '2494 CC',\n",
       " '1968 CC',\n",
       " '1798 CC',\n",
       " '1968 CC',\n",
       " '2143 CC',\n",
       " '1248 CC',\n",
       " '1197 CC',\n",
       " '1396 CC',\n",
       " '1248 CC',\n",
       " '1196 CC',\n",
       " '1197 CC',\n",
       " '1498 CC',\n",
       " '1498 CC',\n",
       " '998 CC',\n",
       " '1498 CC',\n",
       " '1248 CC',\n",
       " '1248 CC',\n",
       " '1197 CC',\n",
       " '1248 CC',\n",
       " '2982 CC',\n",
       " '1248 CC',\n",
       " '1373 CC',\n",
       " '1598 CC',\n",
       " '2494 CC',\n",
       " '1498 CC',\n",
       " '1998 CC',\n",
       " '998 CC',\n",
       " '1198 CC',\n",
       " '796 CC',\n",
       " '796 CC',\n",
       " '1086 CC',\n",
       " '796 CC',\n",
       " '998 CC',\n",
       " '1198 CC',\n",
       " '1086 CC',\n",
       " '1598 CC',\n",
       " '998 CC',\n",
       " '1197 CC',\n",
       " '1248 CC',\n",
       " '1197 CC',\n",
       " '796 CC',\n",
       " '1396 CC',\n",
       " '998 CC',\n",
       " '1248 CC',\n",
       " '1197 CC',\n",
       " '1196 CC',\n",
       " '1197 CC',\n",
       " '2179 CC',\n",
       " '1194 CC',\n",
       " '1591 CC',\n",
       " '1798 CC',\n",
       " '1172 CC',\n",
       " '2179 CC',\n",
       " '1405 CC',\n",
       " '1582 CC',\n",
       " '1396 CC',\n",
       " '1798 CC',\n",
       " '998 CC',\n",
       " '1248 CC',\n",
       " '1197 CC',\n",
       " '998 CC',\n",
       " '1461 CC',\n",
       " '1582 CC',\n",
       " '1498 CC',\n",
       " '1248 CC',\n",
       " '999 CC',\n",
       " '998 CC',\n",
       " '796 CC',\n",
       " '1248 CC',\n",
       " '1086 CC',\n",
       " '1248 CC',\n",
       " '1198 CC',\n",
       " '1968 CC',\n",
       " '2487 CC',\n",
       " '1999 CC',\n",
       " '3604 CC',\n",
       " '1999 CC',\n",
       " '2987 CC',\n",
       " '1995 CC',\n",
       " '1995 CC',\n",
       " '1798 CC',\n",
       " '2143 CC',\n",
       " '1451 CC',\n",
       " '1497 CC',\n",
       " '1798 CC',\n",
       " '1969 CC',\n",
       " '2967 CC',\n",
       " '1248 CC',\n",
       " '2987 CC',\n",
       " '2497 CC',\n",
       " '1797 CC',\n",
       " '1999 CC',\n",
       " '1198 CC',\n",
       " '1598 CC',\n",
       " '1797 CC',\n",
       " '1598 CC',\n",
       " '1991 CC',\n",
       " '1373 CC',\n",
       " '1991 CC',\n",
       " '1497 CC',\n",
       " '1197 CC',\n",
       " '998 CC',\n",
       " '1197 CC',\n",
       " '2755 CC',\n",
       " '1497 CC',\n",
       " '1995 CC',\n",
       " '2494 CC',\n",
       " '1995 CC',\n",
       " '2362 CC',\n",
       " '1373 CC',\n",
       " '1969 CC',\n",
       " '1598 CC',\n",
       " '1196 CC',\n",
       " '1399 CC',\n",
       " '1197 CC',\n",
       " '998 CC',\n",
       " '1197 CC',\n",
       " '796 CC',\n",
       " '1248 CC',\n",
       " '1197 CC',\n",
       " '999 CC',\n",
       " '1197 CC',\n",
       " '1197 CC',\n",
       " '1197 CC',\n",
       " '1493 CC',\n",
       " '1364 CC',\n",
       " '796 CC',\n",
       " '2982 CC',\n",
       " '1198 CC',\n",
       " '1248 CC',\n",
       " '1497 CC',\n",
       " '993 CC',\n",
       " '998 CC',\n",
       " '1599 CC',\n",
       " '1197 CC',\n",
       " '1341 CC',\n",
       " '1197 CC',\n",
       " '1248 CC',\n",
       " '1199 CC',\n",
       " '1248 CC',\n",
       " '1497 CC',\n",
       " '1198 CC',\n",
       " '998 CC',\n",
       " '1197 CC',\n",
       " '1197 CC',\n",
       " '998 CC',\n",
       " '1197 CC',\n",
       " '796 CC',\n",
       " '1197 CC',\n",
       " '1197 CC',\n",
       " '2179 CC',\n",
       " '1197 CC',\n",
       " '1248 CC',\n",
       " '998 CC',\n",
       " '1794 CC',\n",
       " '1198 CC',\n",
       " '1197 CC',\n",
       " '2179 CC',\n",
       " '796 CC',\n",
       " '799 CC',\n",
       " '1198 CC',\n",
       " '1248 CC',\n",
       " '1197 CC',\n",
       " '796 CC',\n",
       " '1197 CC',\n",
       " '1193 CC',\n",
       " '1498 CC',\n",
       " '1497 CC',\n",
       " '1198 CC',\n",
       " '998 CC',\n",
       " '2696 CC',\n",
       " '1493 CC',\n",
       " '1248 CC',\n",
       " '1582 CC',\n",
       " '799 CC',\n",
       " '1248 CC',\n",
       " '2179 CC',\n",
       " '1196 CC',\n",
       " '1086 CC',\n",
       " '1495 CC',\n",
       " '2179 CC',\n",
       " '2494 CC',\n",
       " '1248 CC',\n",
       " '1199 CC',\n",
       " '1197 CC',\n",
       " '1248 CC',\n",
       " '1248 CC',\n",
       " '1341 CC',\n",
       " '1197 CC',\n",
       " '1197 CC',\n",
       " '1405 CC',\n",
       " '1396 CC',\n",
       " '1248 CC',\n",
       " '2179 CC',\n",
       " '1497 CC',\n",
       " '1582 CC',\n",
       " '1248 CC',\n",
       " '1248 CC',\n",
       " '1498 CC',\n",
       " '1248 CC',\n",
       " '1186 CC',\n",
       " '2982 CC',\n",
       " '1047 CC',\n",
       " '1498 CC',\n",
       " '1197 CC',\n",
       " '1197 CC',\n",
       " '2494 CC',\n",
       " '2498 CC',\n",
       " '1248 CC',\n",
       " '1197 CC',\n",
       " '1198 CC',\n",
       " '1396 CC',\n",
       " '2179 CC',\n",
       " '2956 CC',\n",
       " '1047 CC',\n",
       " '1193 CC',\n",
       " '1495 CC',\n",
       " '1198 CC',\n",
       " '1197 CC',\n",
       " '1248 CC',\n",
       " '796 CC',\n",
       " '2179 CC',\n",
       " '2523 CC',\n",
       " '2523 CC',\n",
       " '2143 CC',\n",
       " '796 CC',\n",
       " '1197 CC',\n",
       " '1197 CC',\n",
       " '1197 CC',\n",
       " '1197 CC',\n",
       " '1197 CC',\n",
       " '1197 CC',\n",
       " '1197 CC',\n",
       " '2523 CC',\n",
       " '1591 CC',\n",
       " '1197 CC',\n",
       " '1197 CC',\n",
       " '1197 CC',\n",
       " '796 CC',\n",
       " '1248 CC',\n",
       " '1197 CC',\n",
       " '1120 CC',\n",
       " '1197 CC',\n",
       " '1199 CC',\n",
       " '1199 CC',\n",
       " '796 CC',\n",
       " '1498 CC',\n",
       " '1498 CC',\n",
       " '1373 CC',\n",
       " '1461 CC',\n",
       " '1497 CC',\n",
       " '799 CC',\n",
       " '2494 CC',\n",
       " '998 CC',\n",
       " '1396 CC',\n",
       " '1199 CC',\n",
       " '1186 CC',\n",
       " '1197 CC',\n",
       " '1298 CC',\n",
       " '1197 CC',\n",
       " '1197 CC',\n",
       " '1197 CC',\n",
       " '993 CC',\n",
       " '998 CC',\n",
       " '2494 CC',\n",
       " '1248 CC',\n",
       " '1461 CC',\n",
       " '993 CC',\n",
       " '1591 CC',\n",
       " '998 CC',\n",
       " '796 CC',\n",
       " '1248 CC',\n",
       " '998 CC',\n",
       " '1248 CC',\n",
       " '1248 CC',\n",
       " '1461 CC',\n",
       " '998 CC',\n",
       " '1399 CC',\n",
       " '1197 CC',\n",
       " '1582 CC',\n",
       " '1197 CC',\n",
       " '1198 CC',\n",
       " '1197 CC',\n",
       " '2755 CC',\n",
       " '799 CC',\n",
       " '1198 CC',\n",
       " '1198 CC',\n",
       " '1498 CC',\n",
       " '1364 CC',\n",
       " '1197 CC',\n",
       " '1461 CC',\n",
       " '2179 CC',\n",
       " '2494 CC',\n",
       " '1193 CC',\n",
       " '1797 CC',\n",
       " '2143 CC',\n",
       " '624 CC',\n",
       " '1461 CC',\n",
       " '998 CC',\n",
       " '1248 CC',\n",
       " '1197 CC',\n",
       " '799 CC',\n",
       " '1798 CC',\n",
       " '1999 CC',\n",
       " '2487 CC',\n",
       " '1999 CC',\n",
       " '2179 CC',\n",
       " '1969 CC',\n",
       " '2494 CC',\n",
       " '998 CC',\n",
       " '1248 CC',\n",
       " '1199 CC',\n",
       " '2494 CC',\n",
       " '1197 CC',\n",
       " '1496 CC',\n",
       " '1197 CC',\n",
       " '1186 CC',\n",
       " '1995 CC',\n",
       " '1995 CC',\n",
       " '1199 CC',\n",
       " '1598 CC',\n",
       " '1984 CC',\n",
       " '1197 CC',\n",
       " '2354 CC',\n",
       " '1248 CC',\n",
       " '1582 CC',\n",
       " '2494 CC',\n",
       " '1248 CC',\n",
       " '1599 CC',\n",
       " '1493 CC',\n",
       " '796 CC',\n",
       " '1497 CC',\n",
       " '1248 CC',\n",
       " '1405 CC',\n",
       " '1196 CC',\n",
       " '998 CC',\n",
       " '2179 CC',\n",
       " '998 CC',\n",
       " '814 CC',\n",
       " '1199 CC',\n",
       " '1196 CC',\n",
       " '1999 CC',\n",
       " '2487 CC',\n",
       " '1999 CC',\n",
       " '2179 CC',\n",
       " '1969 CC',\n",
       " '2494 CC',\n",
       " '998 CC',\n",
       " '1248 CC',\n",
       " '1199 CC',\n",
       " '2494 CC',\n",
       " '1197 CC',\n",
       " '1496 CC',\n",
       " '1197 CC',\n",
       " '1186 CC',\n",
       " '1995 CC',\n",
       " '1995 CC',\n",
       " '1199 CC',\n",
       " '1598 CC',\n",
       " '1984 CC',\n",
       " '1498 CC',\n",
       " '1396 CC',\n",
       " '796 CC',\n",
       " '1120 CC',\n",
       " '2494 CC',\n",
       " '1364 CC',\n",
       " '1248 CC',\n",
       " '2494 CC',\n",
       " '1461 CC',\n",
       " '796 CC',\n",
       " '1248 CC',\n",
       " '1498 CC',\n",
       " '1461 CC',\n",
       " '796 CC',\n",
       " '1248 CC',\n",
       " '1197 CC',\n",
       " '796 CC',\n",
       " '998 CC',\n",
       " '1399 CC',\n",
       " '2179 CC',\n",
       " '1196 CC',\n",
       " '998 CC',\n",
       " '1591 CC',\n",
       " '1197 CC',\n",
       " '2179 CC',\n",
       " '1498 CC',\n",
       " '1396 CC',\n",
       " '1396 CC',\n",
       " '1498 CC',\n",
       " '2523 CC',\n",
       " '1461 CC',\n",
       " '1197 CC',\n",
       " '999 CC',\n",
       " '2494 CC',\n",
       " '1197 CC',\n",
       " '2494 CC',\n",
       " '1248 CC',\n",
       " '1461 CC',\n",
       " '1248 CC',\n",
       " '1248 CC',\n",
       " '2982 CC',\n",
       " '1248 CC',\n",
       " '2982 CC',\n",
       " '1991 CC',\n",
       " '1405 CC',\n",
       " '1198 CC',\n",
       " '1493 CC',\n",
       " '1198 CC',\n",
       " '1373 CC',\n",
       " '1498 CC',\n",
       " '1405 CC',\n",
       " '1086 CC',\n",
       " '998 CC',\n",
       " '998 CC',\n",
       " '1582 CC',\n",
       " '1248 CC',\n",
       " '1248 CC',\n",
       " '1591 CC',\n",
       " '1248 CC',\n",
       " '1198 CC',\n",
       " '1493 CC',\n",
       " '1197 CC',\n",
       " '1198 CC',\n",
       " '796 CC',\n",
       " '793 CC',\n",
       " '1298 CC',\n",
       " '1598 CC',\n",
       " '1199 CC',\n",
       " '1364 CC',\n",
       " '1197 CC',\n",
       " '1248 CC',\n",
       " '1799 CC',\n",
       " '1373 CC',\n",
       " '796 CC',\n",
       " '796 CC',\n",
       " '936 CC',\n",
       " '1199 CC',\n",
       " '936 CC',\n",
       " '2179 CC',\n",
       " '1196 CC',\n",
       " '1396 CC',\n",
       " '1248 CC',\n",
       " '1248 CC',\n",
       " '799 CC',\n",
       " '998 CC',\n",
       " '1248 CC',\n",
       " '1396 CC',\n",
       " '2523 CC',\n",
       " '1197 CC',\n",
       " '814 CC',\n",
       " '1196 CC',\n",
       " '1197 CC',\n",
       " '1197 CC',\n",
       " '1199 CC',\n",
       " '1199 CC',\n",
       " '1199 CC',\n",
       " '796 CC',\n",
       " '1956 CC',\n",
       " '1497 CC',\n",
       " '1598 CC',\n",
       " '998 CC',\n",
       " '1197 CC',\n",
       " '1405 CC',\n",
       " '1373 CC',\n",
       " '1197 CC',\n",
       " '814 CC',\n",
       " '1341 CC',\n",
       " '796 CC',\n",
       " '1199 CC',\n",
       " '1193 CC',\n",
       " '1399 CC',\n",
       " '796 CC',\n",
       " '2494 CC',\n",
       " '2523 CC',\n",
       " '796 CC',\n",
       " '998 CC',\n",
       " '1248 CC',\n",
       " '2179 CC',\n",
       " '1248 CC',\n",
       " '2755 CC',\n",
       " '1582 CC',\n",
       " '1248 CC',\n",
       " '1197 CC',\n",
       " '1197 CC',\n",
       " '1199 CC',\n",
       " '1497 CC',\n",
       " '1497 CC',\n",
       " '1198 CC',\n",
       " '1196 CC',\n",
       " '814 CC',\n",
       " '799 CC',\n",
       " '1194 CC',\n",
       " '1086 CC',\n",
       " '1498 CC',\n",
       " '1461 CC',\n",
       " '1197 CC',\n",
       " '1248 CC',\n",
       " '1396 CC',\n",
       " '1956 CC',\n",
       " '1248 CC',\n",
       " '1248 CC',\n",
       " '998 CC',\n",
       " '1498 CC',\n",
       " '1582 CC',\n",
       " '1997 CC',\n",
       " '1461 CC',\n",
       " '2179 CC',\n",
       " '796 CC',\n",
       " '1399 CC',\n",
       " '1197 CC',\n",
       " '1197 CC',\n",
       " '2523 CC',\n",
       " '998 CC',\n",
       " '814 CC',\n",
       " '2494 CC',\n",
       " '2477 CC',\n",
       " '936 CC',\n",
       " '1498 CC',\n",
       " '1496 CC',\n",
       " '814 CC',\n",
       " '799 CC',\n",
       " '998 CC',\n",
       " '2494 CC',\n",
       " '998 CC',\n",
       " '1582 CC',\n",
       " '1498 CC',\n",
       " '1197 CC',\n",
       " '2755 CC',\n",
       " '1499 CC',\n",
       " '1197 CC',\n",
       " '2179 CC',\n",
       " '1948 CC',\n",
       " '1248 CC',\n",
       " '1086 CC',\n",
       " '1405 CC',\n",
       " '999 CC',\n",
       " '2523 CC',\n",
       " '1493 CC',\n",
       " '1248 CC',\n",
       " '796 CC',\n",
       " '1248 CC',\n",
       " '1199 CC',\n",
       " '1399 CC',\n",
       " '796 CC',\n",
       " '998 CC',\n",
       " '1086 CC',\n",
       " '1193 CC',\n",
       " '998 CC',\n",
       " '1248 CC',\n",
       " '2179 CC',\n",
       " '998 CC',\n",
       " '1186 CC',\n",
       " '799 CC',\n",
       " '1248 CC',\n",
       " '2523 CC',\n",
       " '2997 CC',\n",
       " '998 CC',\n",
       " '1248 CC',\n",
       " '814 CC',\n",
       " '2179 CC',\n",
       " '998 CC',\n",
       " '1120 CC',\n",
       " '1498 CC',\n",
       " '998 CC',\n",
       " '2523 CC',\n",
       " '1396 CC',\n",
       " '1248 CC',\n",
       " '2498 CC',\n",
       " '2498 CC',\n",
       " '2498 CC',\n",
       " '998 CC',\n",
       " '1172 CC',\n",
       " '998 CC',\n",
       " '1999 CC',\n",
       " '2487 CC',\n",
       " '1999 CC',\n",
       " '2179 CC',\n",
       " '1969 CC',\n",
       " '2494 CC',\n",
       " '998 CC',\n",
       " '1248 CC',\n",
       " '1199 CC',\n",
       " '2494 CC',\n",
       " '1197 CC',\n",
       " '1496 CC',\n",
       " '1197 CC',\n",
       " '1186 CC',\n",
       " '1995 CC',\n",
       " '1995 CC',\n",
       " '1199 CC',\n",
       " '1598 CC',\n",
       " '1984 CC',\n",
       " '1493 CC',\n",
       " '998 CC',\n",
       " '1197 CC',\n",
       " '2498 CC',\n",
       " '1248 CC',\n",
       " '796 CC',\n",
       " '1493 CC',\n",
       " '1248 CC',\n",
       " '1493 CC',\n",
       " '1405 CC',\n",
       " '1197 CC',\n",
       " '1198 CC',\n",
       " '1197 CC',\n",
       " '1197 CC',\n",
       " '1498 CC',\n",
       " '1496 CC',\n",
       " '2143 CC',\n",
       " '2982 CC',\n",
       " '1198 CC',\n",
       " '1598 CC',\n",
       " '1196 CC',\n",
       " '2523 CC',\n",
       " '1086 CC',\n",
       " '1086 CC',\n",
       " '1461 CC',\n",
       " '1086 CC',\n",
       " '998 CC',\n",
       " '1086 CC',\n",
       " '2489 CC',\n",
       " '1061 CC',\n",
       " '1405 CC',\n",
       " '2523 CC',\n",
       " '1248 CC',\n",
       " '1248 CC',\n",
       " '999 CC',\n",
       " '2498 CC',\n",
       " '998 CC',\n",
       " '2523 CC',\n",
       " '1493 CC',\n",
       " '814 CC',\n",
       " '998 CC',\n",
       " '998 CC',\n",
       " '814 CC',\n",
       " '624 CC',\n",
       " '2523 CC',\n",
       " '2499 CC',\n",
       " '1396 CC',\n",
       " '1197 CC',\n",
       " '1493 CC',\n",
       " '2179 CC',\n",
       " '2354 CC',\n",
       " '1198 CC',\n",
       " '1198 CC',\n",
       " '1396 CC',\n",
       " '998 CC',\n",
       " '1495 CC',\n",
       " '2523 CC',\n",
       " '1396 CC',\n",
       " '2523 CC',\n",
       " '2523 CC',\n",
       " '2523 CC',\n",
       " '1498 CC',\n",
       " '1248 CC',\n",
       " '1120 CC',\n",
       " '1197 CC',\n",
       " '1194 CC',\n",
       " '1598 CC',\n",
       " '2523 CC',\n",
       " '2523 CC',\n",
       " '2494 CC',\n",
       " '1197 CC',\n",
       " '999 CC',\n",
       " '1498 CC',\n",
       " '1199 CC',\n",
       " '1197 CC',\n",
       " '2179 CC',\n",
       " '1405 CC',\n",
       " '1197 CC',\n",
       " '1047 CC',\n",
       " '998 CC',\n",
       " '1196 CC',\n",
       " '2179 CC',\n",
       " '2494 CC',\n",
       " '1396 CC',\n",
       " '1196 CC',\n",
       " '2609 CC',\n",
       " '814 CC',\n",
       " '814 CC',\n",
       " '796 CC',\n",
       " '1396 CC',\n",
       " '1248 CC',\n",
       " '1199 CC',\n",
       " '1197 CC',\n",
       " '2489 CC',\n",
       " '2523 CC',\n",
       " '1248 CC',\n",
       " '1120 CC',\n",
       " '1248 CC',\n",
       " '1396 CC',\n",
       " '2498 CC',\n",
       " '1198 CC',\n",
       " '2523 CC',\n",
       " '998 CC',\n",
       " '2179 CC',\n",
       " '1248 CC',\n",
       " '2953 CC',\n",
       " '1197 CC',\n",
       " '1194 CC',\n",
       " '2179 CC',\n",
       " '1150 CC',\n",
       " '2523 CC',\n",
       " '2179 CC',\n",
       " '1086 CC',\n",
       " '799 CC',\n",
       " '2523 CC',\n",
       " '1197 CC',\n",
       " '1396 CC',\n",
       " '1194 CC',\n",
       " '796 CC',\n",
       " '1799 CC',\n",
       " '2179 CC',\n",
       " '796 CC',\n",
       " '1994 CC',\n",
       " '1248 CC',\n",
       " '1198 CC',\n",
       " '1248 CC',\n",
       " '999 CC',\n",
       " '1248 CC',\n",
       " '998 CC',\n",
       " '1197 CC',\n",
       " '814 CC',\n",
       " '1461 CC',\n",
       " '1497 CC',\n",
       " '1199 CC',\n",
       " '1248 CC',\n",
       " '796 CC',\n",
       " '1498 CC',\n",
       " '1373 CC',\n",
       " '1248 CC',\n",
       " '1373 CC',\n",
       " '1197 CC',\n",
       " '796 CC',\n",
       " '1248 CC',\n",
       " '2523 CC',\n",
       " '796 CC',\n",
       " '796 CC',\n",
       " '1498 CC',\n",
       " '2494 CC',\n",
       " '814 CC',\n",
       " '998 CC',\n",
       " '1197 CC',\n",
       " '1197 CC',\n",
       " '1248 CC',\n",
       " '1582 CC',\n",
       " '1197 CC',\n",
       " '1582 CC',\n",
       " '1997 CC',\n",
       " '1197 CC',\n",
       " '1086 CC',\n",
       " '796 CC',\n",
       " '796 CC',\n",
       " '1498 CC',\n",
       " '1461 CC',\n",
       " '998 CC',\n",
       " '998 CC',\n",
       " '2956 CC',\n",
       " '998 CC',\n",
       " '2179 CC',\n",
       " '1197 CC',\n",
       " '1405 CC',\n",
       " '1086 CC',\n",
       " '1197 CC',\n",
       " '1388 CC',\n",
       " '1198 CC',\n",
       " '1086 CC',\n",
       " '1248 CC',\n",
       " '1248 CC',\n",
       " '796 CC',\n",
       " '2179 CC',\n",
       " '1493 CC',\n",
       " '998 CC',\n",
       " '1248 CC',\n",
       " '1248 CC',\n",
       " '1396 CC',\n",
       " '999 CC',\n",
       " '1199 CC',\n",
       " '796 CC',\n",
       " '1197 CC',\n",
       " '799 CC',\n",
       " '1582 CC',\n",
       " '1047 CC',\n",
       " '1248 CC',\n",
       " '796 CC',\n",
       " '799 CC',\n",
       " '814 CC',\n",
       " '1248 CC',\n",
       " '998 CC',\n",
       " '1364 CC',\n",
       " '1197 CC',\n",
       " '1197 CC',\n",
       " '1248 CC',\n",
       " '2179 CC',\n",
       " '1405 CC',\n",
       " '2179 CC',\n",
       " '1405 CC',\n",
       " '1399 CC',\n",
       " '998 CC',\n",
       " '999 CC',\n",
       " '936 CC',\n",
       " '2179 CC',\n",
       " '799 CC',\n",
       " '1199 CC',\n",
       " '2523 CC',\n",
       " '1396 CC',\n",
       " '1495 CC',\n",
       " '1399 CC',\n",
       " '2523 CC',\n",
       " '1997 CC',\n",
       " '1968 CC',\n",
       " '1399 CC',\n",
       " '2523 CC',\n",
       " '1396 CC',\n",
       " '1498 CC',\n",
       " '1497 CC',\n",
       " '1396 CC',\n",
       " '1248 CC',\n",
       " '1197 CC',\n",
       " '796 CC',\n",
       " '1399 CC',\n",
       " '2494 CC',\n",
       " '2982 CC',\n",
       " '1197 CC',\n",
       " '1968 CC',\n",
       " '1364 CC',\n",
       " '1197 CC',\n",
       " '1197 CC',\n",
       " '814 CC',\n",
       " '1248 CC',\n",
       " '1248 CC',\n",
       " '814 CC',\n",
       " '1186 CC',\n",
       " '1196 CC',\n",
       " '1198 CC',\n",
       " '1248 CC',\n",
       " '1493 CC',\n",
       " '1396 CC',\n",
       " '796 CC',\n",
       " '799 CC',\n",
       " '1462 CC',\n",
       " '1396 CC',\n",
       " '2179 CC',\n",
       " '2523 CC',\n",
       " '2494 CC',\n",
       " '1047 CC',\n",
       " '1498 CC',\n",
       " '1086 CC',\n",
       " '1248 CC',\n",
       " '1248 CC',\n",
       " '998 CC',\n",
       " '936 CC',\n",
       " '1396 CC',\n",
       " '1248 CC',\n",
       " '1061 CC',\n",
       " '1396 CC',\n",
       " '796 CC',\n",
       " '1582 CC',\n",
       " '1493 CC',\n",
       " '2956 CC',\n",
       " '993 CC',\n",
       " '1248 CC',\n",
       " '1396 CC',\n",
       " '1248 CC',\n",
       " '1248 CC',\n",
       " '936 CC',\n",
       " '1248 CC',\n",
       " '1399 CC',\n",
       " '1493 CC',\n",
       " '1527 CC',\n",
       " '1197 CC',\n",
       " '1461 CC',\n",
       " '999 CC',\n",
       " '1248 CC',\n",
       " '1248 CC',\n",
       " '1196 CC',\n",
       " '1061 CC',\n",
       " '2179 CC',\n",
       " '2494 CC',\n",
       " '1396 CC',\n",
       " '2523 CC',\n",
       " '2494 CC',\n",
       " '2494 CC',\n",
       " '1197 CC',\n",
       " '796 CC',\n",
       " '1248 CC',\n",
       " '1598 CC',\n",
       " '1248 CC',\n",
       " '2755 CC',\n",
       " '2523 CC',\n",
       " '1198 CC',\n",
       " '1582 CC',\n",
       " '1248 CC',\n",
       " '1341 CC',\n",
       " '998 CC',\n",
       " '1396 CC',\n",
       " '1396 CC',\n",
       " '1199 CC',\n",
       " '1396 CC',\n",
       " '1298 CC',\n",
       " '998 CC',\n",
       " '1248 CC',\n",
       " '2199 CC',\n",
       " '2523 CC',\n",
       " '995 CC',\n",
       " '1248 CC',\n",
       " '1591 CC',\n",
       " '2499 CC',\n",
       " '1248 CC',\n",
       " '2179 CC',\n",
       " '1405 CC',\n",
       " '2523 CC',\n",
       " '998 CC',\n",
       " '1405 CC',\n",
       " '2179 CC',\n",
       " '998 CC',\n",
       " '796 CC',\n",
       " '799 CC',\n",
       " '2523 CC',\n",
       " '1248 CC',\n",
       " '1493 CC',\n",
       " '1599 CC',\n",
       " '2494 CC',\n",
       " '1047 CC',\n",
       " '2494 CC',\n",
       " '1399 CC',\n",
       " '1399 CC',\n",
       " '1498 CC',\n",
       " '1498 CC',\n",
       " '1399 CC',\n",
       " '1498 CC',\n",
       " '2179 CC',\n",
       " '1498 CC',\n",
       " '1591 CC',\n",
       " '1199 CC',\n",
       " '2179 CC',\n",
       " '1497 CC',\n",
       " '1497 CC',\n",
       " '1248 CC',\n",
       " '1399 CC',\n",
       " '1405 CC',\n",
       " '796 CC',\n",
       " '998 CC',\n",
       " '1991 CC',\n",
       " '1086 CC',\n",
       " '1396 CC',\n",
       " ...]"
      ]
     },
     "execution_count": 15,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "u = df['engine'].tolist()\n",
    "u"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[1248.0,\n",
       " 1498.0,\n",
       " 1497.0,\n",
       " 1396.0,\n",
       " 1298.0,\n",
       " 1197.0,\n",
       " 1061.0,\n",
       " 796.0,\n",
       " 1364.0,\n",
       " 1399.0,\n",
       " 1461.0,\n",
       " 993.0,\n",
       " 1248.0,\n",
       " 1061.0,\n",
       " 1198.0,\n",
       " 1248.0,\n",
       " 1396.0,\n",
       " 796.0,\n",
       " 1396.0,\n",
       " 1461.0,\n",
       " 1498.0,\n",
       " 1248.0,\n",
       " 1248.0,\n",
       " 1199.0,\n",
       " 1197.0,\n",
       " 796.0,\n",
       " 1248.0,\n",
       " 1061.0,\n",
       " 796.0,\n",
       " 1248.0,\n",
       " 796.0,\n",
       " 1197.0,\n",
       " 1248.0,\n",
       " 796.0,\n",
       " 998.0,\n",
       " 1591.0,\n",
       " 1198.0,\n",
       " 2179.0,\n",
       " 796.0,\n",
       " 1368.0,\n",
       " 1497.0,\n",
       " 1497.0,\n",
       " 1197.0,\n",
       " 1248.0,\n",
       " 998.0,\n",
       " 2982.0,\n",
       " 2494.0,\n",
       " 2143.0,\n",
       " 1498.0,\n",
       " 2477.0,\n",
       " 1498.0,\n",
       " 1462.0,\n",
       " 1498.0,\n",
       " 2755.0,\n",
       " 2494.0,\n",
       " 1968.0,\n",
       " 1798.0,\n",
       " 1968.0,\n",
       " 2143.0,\n",
       " 1248.0,\n",
       " 1197.0,\n",
       " 1396.0,\n",
       " 1248.0,\n",
       " 1196.0,\n",
       " 1197.0,\n",
       " 1498.0,\n",
       " 1498.0,\n",
       " 998.0,\n",
       " 1498.0,\n",
       " 1248.0,\n",
       " 1248.0,\n",
       " 1197.0,\n",
       " 1248.0,\n",
       " 2982.0,\n",
       " 1248.0,\n",
       " 1373.0,\n",
       " 1598.0,\n",
       " 2494.0,\n",
       " 1498.0,\n",
       " 1998.0,\n",
       " 998.0,\n",
       " 1198.0,\n",
       " 796.0,\n",
       " 796.0,\n",
       " 1086.0,\n",
       " 796.0,\n",
       " 998.0,\n",
       " 1198.0,\n",
       " 1086.0,\n",
       " 1598.0,\n",
       " 998.0,\n",
       " 1197.0,\n",
       " 1248.0,\n",
       " 1197.0,\n",
       " 796.0,\n",
       " 1396.0,\n",
       " 998.0,\n",
       " 1248.0,\n",
       " 1197.0,\n",
       " 1196.0,\n",
       " 1197.0,\n",
       " 2179.0,\n",
       " 1194.0,\n",
       " 1591.0,\n",
       " 1798.0,\n",
       " 1172.0,\n",
       " 2179.0,\n",
       " 1405.0,\n",
       " 1582.0,\n",
       " 1396.0,\n",
       " 1798.0,\n",
       " 998.0,\n",
       " 1248.0,\n",
       " 1197.0,\n",
       " 998.0,\n",
       " 1461.0,\n",
       " 1582.0,\n",
       " 1498.0,\n",
       " 1248.0,\n",
       " 999.0,\n",
       " 998.0,\n",
       " 796.0,\n",
       " 1248.0,\n",
       " 1086.0,\n",
       " 1248.0,\n",
       " 1198.0,\n",
       " 1968.0,\n",
       " 2487.0,\n",
       " 1999.0,\n",
       " 3604.0,\n",
       " 1999.0,\n",
       " 2987.0,\n",
       " 1995.0,\n",
       " 1995.0,\n",
       " 1798.0,\n",
       " 2143.0,\n",
       " 1451.0,\n",
       " 1497.0,\n",
       " 1798.0,\n",
       " 1969.0,\n",
       " 2967.0,\n",
       " 1248.0,\n",
       " 2987.0,\n",
       " 2497.0,\n",
       " 1797.0,\n",
       " 1999.0,\n",
       " 1198.0,\n",
       " 1598.0,\n",
       " 1797.0,\n",
       " 1598.0,\n",
       " 1991.0,\n",
       " 1373.0,\n",
       " 1991.0,\n",
       " 1497.0,\n",
       " 1197.0,\n",
       " 998.0,\n",
       " 1197.0,\n",
       " 2755.0,\n",
       " 1497.0,\n",
       " 1995.0,\n",
       " 2494.0,\n",
       " 1995.0,\n",
       " 2362.0,\n",
       " 1373.0,\n",
       " 1969.0,\n",
       " 1598.0,\n",
       " 1196.0,\n",
       " 1399.0,\n",
       " 1197.0,\n",
       " 998.0,\n",
       " 1197.0,\n",
       " 796.0,\n",
       " 1248.0,\n",
       " 1197.0,\n",
       " 999.0,\n",
       " 1197.0,\n",
       " 1197.0,\n",
       " 1197.0,\n",
       " 1493.0,\n",
       " 1364.0,\n",
       " 796.0,\n",
       " 2982.0,\n",
       " 1198.0,\n",
       " 1248.0,\n",
       " 1497.0,\n",
       " 993.0,\n",
       " 998.0,\n",
       " 1599.0,\n",
       " 1197.0,\n",
       " 1341.0,\n",
       " 1197.0,\n",
       " 1248.0,\n",
       " 1199.0,\n",
       " 1248.0,\n",
       " 1497.0,\n",
       " 1198.0,\n",
       " 998.0,\n",
       " 1197.0,\n",
       " 1197.0,\n",
       " 998.0,\n",
       " 1197.0,\n",
       " 796.0,\n",
       " 1197.0,\n",
       " 1197.0,\n",
       " 2179.0,\n",
       " 1197.0,\n",
       " 1248.0,\n",
       " 998.0,\n",
       " 1794.0,\n",
       " 1198.0,\n",
       " 1197.0,\n",
       " 2179.0,\n",
       " 796.0,\n",
       " 799.0,\n",
       " 1198.0,\n",
       " 1248.0,\n",
       " 1197.0,\n",
       " 796.0,\n",
       " 1197.0,\n",
       " 1193.0,\n",
       " 1498.0,\n",
       " 1497.0,\n",
       " 1198.0,\n",
       " 998.0,\n",
       " 2696.0,\n",
       " 1493.0,\n",
       " 1248.0,\n",
       " 1582.0,\n",
       " 799.0,\n",
       " 1248.0,\n",
       " 2179.0,\n",
       " 1196.0,\n",
       " 1086.0,\n",
       " 1495.0,\n",
       " 2179.0,\n",
       " 2494.0,\n",
       " 1248.0,\n",
       " 1199.0,\n",
       " 1197.0,\n",
       " 1248.0,\n",
       " 1248.0,\n",
       " 1341.0,\n",
       " 1197.0,\n",
       " 1197.0,\n",
       " 1405.0,\n",
       " 1396.0,\n",
       " 1248.0,\n",
       " 2179.0,\n",
       " 1497.0,\n",
       " 1582.0,\n",
       " 1248.0,\n",
       " 1248.0,\n",
       " 1498.0,\n",
       " 1248.0,\n",
       " 1186.0,\n",
       " 2982.0,\n",
       " 1047.0,\n",
       " 1498.0,\n",
       " 1197.0,\n",
       " 1197.0,\n",
       " 2494.0,\n",
       " 2498.0,\n",
       " 1248.0,\n",
       " 1197.0,\n",
       " 1198.0,\n",
       " 1396.0,\n",
       " 2179.0,\n",
       " 2956.0,\n",
       " 1047.0,\n",
       " 1193.0,\n",
       " 1495.0,\n",
       " 1198.0,\n",
       " 1197.0,\n",
       " 1248.0,\n",
       " 796.0,\n",
       " 2179.0,\n",
       " 2523.0,\n",
       " 2523.0,\n",
       " 2143.0,\n",
       " 796.0,\n",
       " 1197.0,\n",
       " 1197.0,\n",
       " 1197.0,\n",
       " 1197.0,\n",
       " 1197.0,\n",
       " 1197.0,\n",
       " 1197.0,\n",
       " 2523.0,\n",
       " 1591.0,\n",
       " 1197.0,\n",
       " 1197.0,\n",
       " 1197.0,\n",
       " 796.0,\n",
       " 1248.0,\n",
       " 1197.0,\n",
       " 1120.0,\n",
       " 1197.0,\n",
       " 1199.0,\n",
       " 1199.0,\n",
       " 796.0,\n",
       " 1498.0,\n",
       " 1498.0,\n",
       " 1373.0,\n",
       " 1461.0,\n",
       " 1497.0,\n",
       " 799.0,\n",
       " 2494.0,\n",
       " 998.0,\n",
       " 1396.0,\n",
       " 1199.0,\n",
       " 1186.0,\n",
       " 1197.0,\n",
       " 1298.0,\n",
       " 1197.0,\n",
       " 1197.0,\n",
       " 1197.0,\n",
       " 993.0,\n",
       " 998.0,\n",
       " 2494.0,\n",
       " 1248.0,\n",
       " 1461.0,\n",
       " 993.0,\n",
       " 1591.0,\n",
       " 998.0,\n",
       " 796.0,\n",
       " 1248.0,\n",
       " 998.0,\n",
       " 1248.0,\n",
       " 1248.0,\n",
       " 1461.0,\n",
       " 998.0,\n",
       " 1399.0,\n",
       " 1197.0,\n",
       " 1582.0,\n",
       " 1197.0,\n",
       " 1198.0,\n",
       " 1197.0,\n",
       " 2755.0,\n",
       " 799.0,\n",
       " 1198.0,\n",
       " 1198.0,\n",
       " 1498.0,\n",
       " 1364.0,\n",
       " 1197.0,\n",
       " 1461.0,\n",
       " 2179.0,\n",
       " 2494.0,\n",
       " 1193.0,\n",
       " 1797.0,\n",
       " 2143.0,\n",
       " 624.0,\n",
       " 1461.0,\n",
       " 998.0,\n",
       " 1248.0,\n",
       " 1197.0,\n",
       " 799.0,\n",
       " 1798.0,\n",
       " 1999.0,\n",
       " 2487.0,\n",
       " 1999.0,\n",
       " 2179.0,\n",
       " 1969.0,\n",
       " 2494.0,\n",
       " 998.0,\n",
       " 1248.0,\n",
       " 1199.0,\n",
       " 2494.0,\n",
       " 1197.0,\n",
       " 1496.0,\n",
       " 1197.0,\n",
       " 1186.0,\n",
       " 1995.0,\n",
       " 1995.0,\n",
       " 1199.0,\n",
       " 1598.0,\n",
       " 1984.0,\n",
       " 1197.0,\n",
       " 2354.0,\n",
       " 1248.0,\n",
       " 1582.0,\n",
       " 2494.0,\n",
       " 1248.0,\n",
       " 1599.0,\n",
       " 1493.0,\n",
       " 796.0,\n",
       " 1497.0,\n",
       " 1248.0,\n",
       " 1405.0,\n",
       " 1196.0,\n",
       " 998.0,\n",
       " 2179.0,\n",
       " 998.0,\n",
       " 814.0,\n",
       " 1199.0,\n",
       " 1196.0,\n",
       " 1999.0,\n",
       " 2487.0,\n",
       " 1999.0,\n",
       " 2179.0,\n",
       " 1969.0,\n",
       " 2494.0,\n",
       " 998.0,\n",
       " 1248.0,\n",
       " 1199.0,\n",
       " 2494.0,\n",
       " 1197.0,\n",
       " 1496.0,\n",
       " 1197.0,\n",
       " 1186.0,\n",
       " 1995.0,\n",
       " 1995.0,\n",
       " 1199.0,\n",
       " 1598.0,\n",
       " 1984.0,\n",
       " 1498.0,\n",
       " 1396.0,\n",
       " 796.0,\n",
       " 1120.0,\n",
       " 2494.0,\n",
       " 1364.0,\n",
       " 1248.0,\n",
       " 2494.0,\n",
       " 1461.0,\n",
       " 796.0,\n",
       " 1248.0,\n",
       " 1498.0,\n",
       " 1461.0,\n",
       " 796.0,\n",
       " 1248.0,\n",
       " 1197.0,\n",
       " 796.0,\n",
       " 998.0,\n",
       " 1399.0,\n",
       " 2179.0,\n",
       " 1196.0,\n",
       " 998.0,\n",
       " 1591.0,\n",
       " 1197.0,\n",
       " 2179.0,\n",
       " 1498.0,\n",
       " 1396.0,\n",
       " 1396.0,\n",
       " 1498.0,\n",
       " 2523.0,\n",
       " 1461.0,\n",
       " 1197.0,\n",
       " 999.0,\n",
       " 2494.0,\n",
       " 1197.0,\n",
       " 2494.0,\n",
       " 1248.0,\n",
       " 1461.0,\n",
       " 1248.0,\n",
       " 1248.0,\n",
       " 2982.0,\n",
       " 1248.0,\n",
       " 2982.0,\n",
       " 1991.0,\n",
       " 1405.0,\n",
       " 1198.0,\n",
       " 1493.0,\n",
       " 1198.0,\n",
       " 1373.0,\n",
       " 1498.0,\n",
       " 1405.0,\n",
       " 1086.0,\n",
       " 998.0,\n",
       " 998.0,\n",
       " 1582.0,\n",
       " 1248.0,\n",
       " 1248.0,\n",
       " 1591.0,\n",
       " 1248.0,\n",
       " 1198.0,\n",
       " 1493.0,\n",
       " 1197.0,\n",
       " 1198.0,\n",
       " 796.0,\n",
       " 793.0,\n",
       " 1298.0,\n",
       " 1598.0,\n",
       " 1199.0,\n",
       " 1364.0,\n",
       " 1197.0,\n",
       " 1248.0,\n",
       " 1799.0,\n",
       " 1373.0,\n",
       " 796.0,\n",
       " 796.0,\n",
       " 936.0,\n",
       " 1199.0,\n",
       " 936.0,\n",
       " 2179.0,\n",
       " 1196.0,\n",
       " 1396.0,\n",
       " 1248.0,\n",
       " 1248.0,\n",
       " 799.0,\n",
       " 998.0,\n",
       " 1248.0,\n",
       " 1396.0,\n",
       " 2523.0,\n",
       " 1197.0,\n",
       " 814.0,\n",
       " 1196.0,\n",
       " 1197.0,\n",
       " 1197.0,\n",
       " 1199.0,\n",
       " 1199.0,\n",
       " 1199.0,\n",
       " 796.0,\n",
       " 1956.0,\n",
       " 1497.0,\n",
       " 1598.0,\n",
       " 998.0,\n",
       " 1197.0,\n",
       " 1405.0,\n",
       " 1373.0,\n",
       " 1197.0,\n",
       " 814.0,\n",
       " 1341.0,\n",
       " 796.0,\n",
       " 1199.0,\n",
       " 1193.0,\n",
       " 1399.0,\n",
       " 796.0,\n",
       " 2494.0,\n",
       " 2523.0,\n",
       " 796.0,\n",
       " 998.0,\n",
       " 1248.0,\n",
       " 2179.0,\n",
       " 1248.0,\n",
       " 2755.0,\n",
       " 1582.0,\n",
       " 1248.0,\n",
       " 1197.0,\n",
       " 1197.0,\n",
       " 1199.0,\n",
       " 1497.0,\n",
       " 1497.0,\n",
       " 1198.0,\n",
       " 1196.0,\n",
       " 814.0,\n",
       " 799.0,\n",
       " 1194.0,\n",
       " 1086.0,\n",
       " 1498.0,\n",
       " 1461.0,\n",
       " 1197.0,\n",
       " 1248.0,\n",
       " 1396.0,\n",
       " 1956.0,\n",
       " 1248.0,\n",
       " 1248.0,\n",
       " 998.0,\n",
       " 1498.0,\n",
       " 1582.0,\n",
       " 1997.0,\n",
       " 1461.0,\n",
       " 2179.0,\n",
       " 796.0,\n",
       " 1399.0,\n",
       " 1197.0,\n",
       " 1197.0,\n",
       " 2523.0,\n",
       " 998.0,\n",
       " 814.0,\n",
       " 2494.0,\n",
       " 2477.0,\n",
       " 936.0,\n",
       " 1498.0,\n",
       " 1496.0,\n",
       " 814.0,\n",
       " 799.0,\n",
       " 998.0,\n",
       " 2494.0,\n",
       " 998.0,\n",
       " 1582.0,\n",
       " 1498.0,\n",
       " 1197.0,\n",
       " 2755.0,\n",
       " 1499.0,\n",
       " 1197.0,\n",
       " 2179.0,\n",
       " 1948.0,\n",
       " 1248.0,\n",
       " 1086.0,\n",
       " 1405.0,\n",
       " 999.0,\n",
       " 2523.0,\n",
       " 1493.0,\n",
       " 1248.0,\n",
       " 796.0,\n",
       " 1248.0,\n",
       " 1199.0,\n",
       " 1399.0,\n",
       " 796.0,\n",
       " 998.0,\n",
       " 1086.0,\n",
       " 1193.0,\n",
       " 998.0,\n",
       " 1248.0,\n",
       " 2179.0,\n",
       " 998.0,\n",
       " 1186.0,\n",
       " 799.0,\n",
       " 1248.0,\n",
       " 2523.0,\n",
       " 2997.0,\n",
       " 998.0,\n",
       " 1248.0,\n",
       " 814.0,\n",
       " 2179.0,\n",
       " 998.0,\n",
       " 1120.0,\n",
       " 1498.0,\n",
       " 998.0,\n",
       " 2523.0,\n",
       " 1396.0,\n",
       " 1248.0,\n",
       " 2498.0,\n",
       " 2498.0,\n",
       " 2498.0,\n",
       " 998.0,\n",
       " 1172.0,\n",
       " 998.0,\n",
       " 1999.0,\n",
       " 2487.0,\n",
       " 1999.0,\n",
       " 2179.0,\n",
       " 1969.0,\n",
       " 2494.0,\n",
       " 998.0,\n",
       " 1248.0,\n",
       " 1199.0,\n",
       " 2494.0,\n",
       " 1197.0,\n",
       " 1496.0,\n",
       " 1197.0,\n",
       " 1186.0,\n",
       " 1995.0,\n",
       " 1995.0,\n",
       " 1199.0,\n",
       " 1598.0,\n",
       " 1984.0,\n",
       " 1493.0,\n",
       " 998.0,\n",
       " 1197.0,\n",
       " 2498.0,\n",
       " 1248.0,\n",
       " 796.0,\n",
       " 1493.0,\n",
       " 1248.0,\n",
       " 1493.0,\n",
       " 1405.0,\n",
       " 1197.0,\n",
       " 1198.0,\n",
       " 1197.0,\n",
       " 1197.0,\n",
       " 1498.0,\n",
       " 1496.0,\n",
       " 2143.0,\n",
       " 2982.0,\n",
       " 1198.0,\n",
       " 1598.0,\n",
       " 1196.0,\n",
       " 2523.0,\n",
       " 1086.0,\n",
       " 1086.0,\n",
       " 1461.0,\n",
       " 1086.0,\n",
       " 998.0,\n",
       " 1086.0,\n",
       " 2489.0,\n",
       " 1061.0,\n",
       " 1405.0,\n",
       " 2523.0,\n",
       " 1248.0,\n",
       " 1248.0,\n",
       " 999.0,\n",
       " 2498.0,\n",
       " 998.0,\n",
       " 2523.0,\n",
       " 1493.0,\n",
       " 814.0,\n",
       " 998.0,\n",
       " 998.0,\n",
       " 814.0,\n",
       " 624.0,\n",
       " 2523.0,\n",
       " 2499.0,\n",
       " 1396.0,\n",
       " 1197.0,\n",
       " 1493.0,\n",
       " 2179.0,\n",
       " 2354.0,\n",
       " 1198.0,\n",
       " 1198.0,\n",
       " 1396.0,\n",
       " 998.0,\n",
       " 1495.0,\n",
       " 2523.0,\n",
       " 1396.0,\n",
       " 2523.0,\n",
       " 2523.0,\n",
       " 2523.0,\n",
       " 1498.0,\n",
       " 1248.0,\n",
       " 1120.0,\n",
       " 1197.0,\n",
       " 1194.0,\n",
       " 1598.0,\n",
       " 2523.0,\n",
       " 2523.0,\n",
       " 2494.0,\n",
       " 1197.0,\n",
       " 999.0,\n",
       " 1498.0,\n",
       " 1199.0,\n",
       " 1197.0,\n",
       " 2179.0,\n",
       " 1405.0,\n",
       " 1197.0,\n",
       " 1047.0,\n",
       " 998.0,\n",
       " 1196.0,\n",
       " 2179.0,\n",
       " 2494.0,\n",
       " 1396.0,\n",
       " 1196.0,\n",
       " 2609.0,\n",
       " 814.0,\n",
       " 814.0,\n",
       " 796.0,\n",
       " 1396.0,\n",
       " 1248.0,\n",
       " 1199.0,\n",
       " 1197.0,\n",
       " 2489.0,\n",
       " 2523.0,\n",
       " 1248.0,\n",
       " 1120.0,\n",
       " 1248.0,\n",
       " 1396.0,\n",
       " 2498.0,\n",
       " 1198.0,\n",
       " 2523.0,\n",
       " 998.0,\n",
       " 2179.0,\n",
       " 1248.0,\n",
       " 2953.0,\n",
       " 1197.0,\n",
       " 1194.0,\n",
       " 2179.0,\n",
       " 1150.0,\n",
       " 2523.0,\n",
       " 2179.0,\n",
       " 1086.0,\n",
       " 799.0,\n",
       " 2523.0,\n",
       " 1197.0,\n",
       " 1396.0,\n",
       " 1194.0,\n",
       " 796.0,\n",
       " 1799.0,\n",
       " 2179.0,\n",
       " 796.0,\n",
       " 1994.0,\n",
       " 1248.0,\n",
       " 1198.0,\n",
       " 1248.0,\n",
       " 999.0,\n",
       " 1248.0,\n",
       " 998.0,\n",
       " 1197.0,\n",
       " 814.0,\n",
       " 1461.0,\n",
       " 1497.0,\n",
       " 1199.0,\n",
       " 1248.0,\n",
       " 796.0,\n",
       " 1498.0,\n",
       " 1373.0,\n",
       " 1248.0,\n",
       " 1373.0,\n",
       " 1197.0,\n",
       " 796.0,\n",
       " 1248.0,\n",
       " 2523.0,\n",
       " 796.0,\n",
       " 796.0,\n",
       " 1498.0,\n",
       " 2494.0,\n",
       " 814.0,\n",
       " 998.0,\n",
       " 1197.0,\n",
       " 1197.0,\n",
       " 1248.0,\n",
       " 1582.0,\n",
       " 1197.0,\n",
       " 1582.0,\n",
       " 1997.0,\n",
       " 1197.0,\n",
       " 1086.0,\n",
       " 796.0,\n",
       " 796.0,\n",
       " 1498.0,\n",
       " 1461.0,\n",
       " 998.0,\n",
       " 998.0,\n",
       " 2956.0,\n",
       " 998.0,\n",
       " 2179.0,\n",
       " 1197.0,\n",
       " 1405.0,\n",
       " 1086.0,\n",
       " 1197.0,\n",
       " 1388.0,\n",
       " 1198.0,\n",
       " 1086.0,\n",
       " 1248.0,\n",
       " 1248.0,\n",
       " 796.0,\n",
       " 2179.0,\n",
       " 1493.0,\n",
       " 998.0,\n",
       " 1248.0,\n",
       " 1248.0,\n",
       " 1396.0,\n",
       " 999.0,\n",
       " 1199.0,\n",
       " 796.0,\n",
       " 1197.0,\n",
       " 799.0,\n",
       " 1582.0,\n",
       " 1047.0,\n",
       " 1248.0,\n",
       " 796.0,\n",
       " 799.0,\n",
       " 814.0,\n",
       " 1248.0,\n",
       " 998.0,\n",
       " 1364.0,\n",
       " 1197.0,\n",
       " 1197.0,\n",
       " 1248.0,\n",
       " 2179.0,\n",
       " 1405.0,\n",
       " 2179.0,\n",
       " 1405.0,\n",
       " 1399.0,\n",
       " 998.0,\n",
       " 999.0,\n",
       " 936.0,\n",
       " 2179.0,\n",
       " 799.0,\n",
       " 1199.0,\n",
       " 2523.0,\n",
       " 1396.0,\n",
       " 1495.0,\n",
       " 1399.0,\n",
       " 2523.0,\n",
       " 1997.0,\n",
       " 1968.0,\n",
       " 1399.0,\n",
       " 2523.0,\n",
       " 1396.0,\n",
       " 1498.0,\n",
       " 1497.0,\n",
       " 1396.0,\n",
       " 1248.0,\n",
       " 1197.0,\n",
       " 796.0,\n",
       " 1399.0,\n",
       " 2494.0,\n",
       " 2982.0,\n",
       " 1197.0,\n",
       " 1968.0,\n",
       " 1364.0,\n",
       " 1197.0,\n",
       " 1197.0,\n",
       " 814.0,\n",
       " 1248.0,\n",
       " 1248.0,\n",
       " 814.0,\n",
       " 1186.0,\n",
       " 1196.0,\n",
       " 1198.0,\n",
       " 1248.0,\n",
       " 1493.0,\n",
       " 1396.0,\n",
       " 796.0,\n",
       " 799.0,\n",
       " 1462.0,\n",
       " 1396.0,\n",
       " 2179.0,\n",
       " 2523.0,\n",
       " 2494.0,\n",
       " 1047.0,\n",
       " 1498.0,\n",
       " 1086.0,\n",
       " 1248.0,\n",
       " 1248.0,\n",
       " 998.0,\n",
       " 936.0,\n",
       " 1396.0,\n",
       " 1248.0,\n",
       " 1061.0,\n",
       " 1396.0,\n",
       " 796.0,\n",
       " 1582.0,\n",
       " 1493.0,\n",
       " 2956.0,\n",
       " 993.0,\n",
       " 1248.0,\n",
       " 1396.0,\n",
       " 1248.0,\n",
       " 1248.0,\n",
       " 936.0,\n",
       " 1248.0,\n",
       " 1399.0,\n",
       " 1493.0,\n",
       " 1527.0,\n",
       " 1197.0,\n",
       " 1461.0,\n",
       " 999.0,\n",
       " 1248.0,\n",
       " 1248.0,\n",
       " 1196.0,\n",
       " 1061.0,\n",
       " 2179.0,\n",
       " 2494.0,\n",
       " 1396.0,\n",
       " 2523.0,\n",
       " 2494.0,\n",
       " 2494.0,\n",
       " 1197.0,\n",
       " 796.0,\n",
       " 1248.0,\n",
       " 1598.0,\n",
       " 1248.0,\n",
       " 2755.0,\n",
       " 2523.0,\n",
       " 1198.0,\n",
       " 1582.0,\n",
       " 1248.0,\n",
       " 1341.0,\n",
       " 998.0,\n",
       " 1396.0,\n",
       " 1396.0,\n",
       " 1199.0,\n",
       " 1396.0,\n",
       " 1298.0,\n",
       " 998.0,\n",
       " 1248.0,\n",
       " 2199.0,\n",
       " 2523.0,\n",
       " 995.0,\n",
       " 1248.0,\n",
       " 1591.0,\n",
       " 2499.0,\n",
       " 1248.0,\n",
       " 2179.0,\n",
       " 1405.0,\n",
       " 2523.0,\n",
       " 998.0,\n",
       " 1405.0,\n",
       " 2179.0,\n",
       " 998.0,\n",
       " 796.0,\n",
       " 799.0,\n",
       " 2523.0,\n",
       " 1248.0,\n",
       " 1493.0,\n",
       " 1599.0,\n",
       " 2494.0,\n",
       " 1047.0,\n",
       " 2494.0,\n",
       " 1399.0,\n",
       " 1399.0,\n",
       " 1498.0,\n",
       " 1498.0,\n",
       " 1399.0,\n",
       " 1498.0,\n",
       " 2179.0,\n",
       " 1498.0,\n",
       " 1591.0,\n",
       " 1199.0,\n",
       " 2179.0,\n",
       " 1497.0,\n",
       " 1497.0,\n",
       " 1248.0,\n",
       " 1399.0,\n",
       " 1405.0,\n",
       " 796.0,\n",
       " 998.0,\n",
       " 1991.0,\n",
       " 1086.0,\n",
       " 1396.0,\n",
       " ...]"
      ]
     },
     "execution_count": 16,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "uu=[]\n",
    "for i in range(len(u)):\n",
    "    r=u[i]\n",
    "    if r[-2:]==\"CC\":\n",
    "        x=r.strip(\" CC\")\n",
    "    y=float(x)\n",
    "    uu.append(y)\n",
    "uu"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[74.0,\n",
       " 103.52,\n",
       " 78.0,\n",
       " 90.0,\n",
       " 88.2,\n",
       " 81.86,\n",
       " 57.5,\n",
       " 37.0,\n",
       " 67.1,\n",
       " 68.1,\n",
       " 108.45,\n",
       " 60.0,\n",
       " 73.9,\n",
       " 67.0,\n",
       " 82.0,\n",
       " 88.5,\n",
       " 90.0,\n",
       " 46.3,\n",
       " 88.73,\n",
       " 64.1,\n",
       " 98.6,\n",
       " 74.0,\n",
       " 88.8,\n",
       " 83.81,\n",
       " 83.1,\n",
       " 47.3,\n",
       " 73.8,\n",
       " 67.0,\n",
       " 34.2,\n",
       " 88.5,\n",
       " 35.0,\n",
       " 81.83,\n",
       " 88.5,\n",
       " 40.3,\n",
       " 67.1,\n",
       " 121.3,\n",
       " 67.0,\n",
       " 138.03,\n",
       " 37.0,\n",
       " 160.77,\n",
       " 117.3,\n",
       " 116.3,\n",
       " 83.14,\n",
       " 88.5,\n",
       " 67.05,\n",
       " 168.5,\n",
       " 100.0,\n",
       " 120.7,\n",
       " 98.63,\n",
       " 175.56,\n",
       " 98.6,\n",
       " 103.25,\n",
       " 98.6,\n",
       " 171.5,\n",
       " 100.6,\n",
       " 174.33,\n",
       " 138.03,\n",
       " 187.74,\n",
       " 170.0,\n",
       " 88.8,\n",
       " 78.9,\n",
       " 88.76,\n",
       " 74.0,\n",
       " 86.8,\n",
       " 83.1,\n",
       " 108.495,\n",
       " 98.6,\n",
       " 67.0,\n",
       " 108.62,\n",
       " 88.5,\n",
       " 88.5,\n",
       " 78.9,\n",
       " 74.0,\n",
       " 168.5,\n",
       " 74.0,\n",
       " 93.7,\n",
       " 103.6,\n",
       " 100.6,\n",
       " 98.59,\n",
       " 189.0,\n",
       " 67.04,\n",
       " 67.05,\n",
       " 47.3,\n",
       " 47.3,\n",
       " 68.05,\n",
       " 35.0,\n",
       " 58.2,\n",
       " 74.0,\n",
       " 68.05,\n",
       " 103.6,\n",
       " 67.1,\n",
       " 82.85,\n",
       " 74.0,\n",
       " 82.0,\n",
       " 46.3,\n",
       " 88.73,\n",
       " 67.05,\n",
       " 90.0,\n",
       " 81.8,\n",
       " 73.0,\n",
       " 83.1,\n",
       " 120.0,\n",
       " 94.68,\n",
       " 121.3,\n",
       " 160.0,\n",
       " 65.0,\n",
       " 155.0,\n",
       " 69.01,\n",
       " 126.32,\n",
       " 88.76,\n",
       " 138.1,\n",
       " 67.04,\n",
       " 88.5,\n",
       " 83.14,\n",
       " 67.04,\n",
       " 83.8,\n",
       " 126.2,\n",
       " 98.96,\n",
       " 73.9,\n",
       " 67.0,\n",
       " 67.04,\n",
       " 46.3,\n",
       " 88.76,\n",
       " 62.1,\n",
       " 88.76,\n",
       " 86.7,\n",
       " 188.0,\n",
       " 214.56,\n",
       " 177.0,\n",
       " 280.0,\n",
       " 148.31,\n",
       " 254.79,\n",
       " 187.74,\n",
       " 190.0,\n",
       " 177.46,\n",
       " 204.0,\n",
       " 141.0,\n",
       " 117.6,\n",
       " 138.03,\n",
       " 190.0,\n",
       " 241.4,\n",
       " 88.5,\n",
       " 282.0,\n",
       " 150.0,\n",
       " 147.5,\n",
       " 177.0,\n",
       " 108.5,\n",
       " 103.6,\n",
       " 147.5,\n",
       " 103.5,\n",
       " 183.0,\n",
       " 93.7,\n",
       " 181.04,\n",
       " 116.3,\n",
       " 81.8,\n",
       " 67.05,\n",
       " 81.8,\n",
       " 171.5,\n",
       " 108.5,\n",
       " 190.0,\n",
       " 157.7,\n",
       " 190.0,\n",
       " 164.7,\n",
       " 91.1,\n",
       " 400.0,\n",
       " 103.6,\n",
       " 86.8,\n",
       " 68.0,\n",
       " 81.8,\n",
       " 67.0,\n",
       " 81.83,\n",
       " 37.0,\n",
       " 73.9,\n",
       " 82.0,\n",
       " 75.0,\n",
       " 82.0,\n",
       " 85.8,\n",
       " 82.0,\n",
       " 100.0,\n",
       " 87.2,\n",
       " 53.0,\n",
       " 168.5,\n",
       " 82.0,\n",
       " 74.0,\n",
       " 118.0,\n",
       " 60.0,\n",
       " 67.1,\n",
       " 103.2,\n",
       " 83.14,\n",
       " 83.0,\n",
       " 81.86,\n",
       " 88.5,\n",
       " 84.0,\n",
       " 88.76,\n",
       " 117.3,\n",
       " 86.8,\n",
       " 58.16,\n",
       " 83.14,\n",
       " 82.85,\n",
       " 67.0,\n",
       " 81.8,\n",
       " 47.3,\n",
       " 81.8,\n",
       " 81.8,\n",
       " 147.94,\n",
       " 82.85,\n",
       " 74.02,\n",
       " 67.04,\n",
       " 138.1,\n",
       " 86.8,\n",
       " 83.1,\n",
       " 147.94,\n",
       " 46.3,\n",
       " 53.3,\n",
       " 67.0,\n",
       " 88.5,\n",
       " 81.86,\n",
       " 47.3,\n",
       " 80.0,\n",
       " 88.7,\n",
       " 97.7,\n",
       " 121.36,\n",
       " 67.04,\n",
       " 67.04,\n",
       " 162.0,\n",
       " 100.0,\n",
       " 73.9,\n",
       " 126.2,\n",
       " 53.3,\n",
       " 88.76,\n",
       " 140.0,\n",
       " 73.0,\n",
       " 62.1,\n",
       " 94.0,\n",
       " 140.0,\n",
       " 100.57,\n",
       " 74.0,\n",
       " 88.76,\n",
       " 78.9,\n",
       " 74.0,\n",
       " 88.5,\n",
       " 82.9,\n",
       " 80.0,\n",
       " 83.11,\n",
       " 70.0,\n",
       " 88.73,\n",
       " 74.0,\n",
       " 153.86,\n",
       " 121.0,\n",
       " 126.3,\n",
       " 74.0,\n",
       " 73.9,\n",
       " 98.6,\n",
       " 73.9,\n",
       " 73.97,\n",
       " 171.0,\n",
       " 69.0,\n",
       " 99.6,\n",
       " 81.86,\n",
       " 83.14,\n",
       " 102.0,\n",
       " 105.0,\n",
       " 73.9,\n",
       " 81.8,\n",
       " 67.05,\n",
       " 88.73,\n",
       " 120.0,\n",
       " 69.01,\n",
       " 69.0,\n",
       " 88.7,\n",
       " 94.0,\n",
       " 86.8,\n",
       " 82.0,\n",
       " 88.76,\n",
       " 46.3,\n",
       " 138.1,\n",
       " 63.0,\n",
       " 63.0,\n",
       " 170.0,\n",
       " 34.2,\n",
       " 82.0,\n",
       " 82.0,\n",
       " 78.9,\n",
       " 81.8,\n",
       " 78.9,\n",
       " 85.8,\n",
       " 85.8,\n",
       " 62.1,\n",
       " 121.3,\n",
       " 81.86,\n",
       " 81.8,\n",
       " 80.0,\n",
       " 46.3,\n",
       " 74.0,\n",
       " 85.8,\n",
       " 70.0,\n",
       " 85.8,\n",
       " 79.4,\n",
       " 84.0,\n",
       " 37.0,\n",
       " 97.9,\n",
       " 97.9,\n",
       " 93.7,\n",
       " 108.5,\n",
       " 117.3,\n",
       " 53.3,\n",
       " 100.6,\n",
       " 67.04,\n",
       " 88.7,\n",
       " 84.0,\n",
       " 73.97,\n",
       " 83.1,\n",
       " 88.2,\n",
       " 85.8,\n",
       " 81.8,\n",
       " 80.0,\n",
       " 60.0,\n",
       " 67.04,\n",
       " 102.0,\n",
       " 73.9,\n",
       " 63.1,\n",
       " 60.0,\n",
       " 121.3,\n",
       " 67.1,\n",
       " 46.3,\n",
       " 73.9,\n",
       " 66.1,\n",
       " 88.76,\n",
       " 75.0,\n",
       " 63.1,\n",
       " 67.1,\n",
       " 68.0,\n",
       " 110.0,\n",
       " 126.2,\n",
       " 81.8,\n",
       " 67.0,\n",
       " 82.0,\n",
       " 174.5,\n",
       " 53.26,\n",
       " 86.8,\n",
       " 73.75,\n",
       " 97.7,\n",
       " 67.06,\n",
       " 78.9,\n",
       " 83.8,\n",
       " 140.0,\n",
       " 102.0,\n",
       " 64.08,\n",
       " 147.5,\n",
       " 170.0,\n",
       " 37.5,\n",
       " 63.1,\n",
       " 67.1,\n",
       " 74.0,\n",
       " 78.9,\n",
       " 53.3,\n",
       " 189.3,\n",
       " 177.0,\n",
       " 214.56,\n",
       " 177.0,\n",
       " 147.94,\n",
       " 190.0,\n",
       " 157.7,\n",
       " 67.05,\n",
       " 74.0,\n",
       " 88.7,\n",
       " 100.6,\n",
       " 81.8,\n",
       " 88.73,\n",
       " 81.8,\n",
       " 73.97,\n",
       " 190.0,\n",
       " 190.0,\n",
       " 88.76,\n",
       " 103.5,\n",
       " 150.0,\n",
       " 78.9,\n",
       " 158.8,\n",
       " 74.0,\n",
       " 126.32,\n",
       " 102.0,\n",
       " 88.8,\n",
       " 103.2,\n",
       " 110.0,\n",
       " 47.3,\n",
       " 117.6,\n",
       " 74.02,\n",
       " 70.0,\n",
       " 61.7,\n",
       " 67.05,\n",
       " 140.0,\n",
       " 67.1,\n",
       " 55.2,\n",
       " 84.0,\n",
       " 73.0,\n",
       " 177.0,\n",
       " 214.56,\n",
       " 177.0,\n",
       " 147.94,\n",
       " 190.0,\n",
       " 157.7,\n",
       " 67.05,\n",
       " 74.0,\n",
       " 88.7,\n",
       " 100.6,\n",
       " 81.8,\n",
       " 88.73,\n",
       " 81.8,\n",
       " 73.97,\n",
       " 190.0,\n",
       " 190.0,\n",
       " 88.76,\n",
       " 103.5,\n",
       " 150.0,\n",
       " 78.9,\n",
       " 88.7,\n",
       " 46.3,\n",
       " 71.01,\n",
       " 100.6,\n",
       " 67.1,\n",
       " 74.02,\n",
       " 102.0,\n",
       " 63.1,\n",
       " 37.0,\n",
       " 74.0,\n",
       " 88.8,\n",
       " 64.1,\n",
       " 37.0,\n",
       " 74.0,\n",
       " 81.86,\n",
       " 37.0,\n",
       " 67.04,\n",
       " 68.05,\n",
       " 138.03,\n",
       " 86.8,\n",
       " 67.04,\n",
       " 121.3,\n",
       " 81.8,\n",
       " 153.86,\n",
       " 98.96,\n",
       " 88.73,\n",
       " 88.73,\n",
       " 78.9,\n",
       " 62.1,\n",
       " 83.8,\n",
       " 83.11,\n",
       " 67.0,\n",
       " 100.0,\n",
       " 81.83,\n",
       " 100.6,\n",
       " 74.0,\n",
       " 108.45,\n",
       " 73.74,\n",
       " 88.5,\n",
       " 168.5,\n",
       " 74.0,\n",
       " 168.5,\n",
       " 147.9,\n",
       " 71.0,\n",
       " 67.04,\n",
       " 110.0,\n",
       " 77.0,\n",
       " 93.7,\n",
       " 90.0,\n",
       " 70.0,\n",
       " 68.05,\n",
       " 66.1,\n",
       " 67.1,\n",
       " 126.2,\n",
       " 88.5,\n",
       " 74.0,\n",
       " 121.4,\n",
       " 74.0,\n",
       " 77.0,\n",
       " 113.4,\n",
       " 81.86,\n",
       " 86.8,\n",
       " 47.3,\n",
       " 47.0,\n",
       " 85.8,\n",
       " 103.6,\n",
       " 79.4,\n",
       " 67.06,\n",
       " 82.0,\n",
       " 74.02,\n",
       " 130.0,\n",
       " 91.1,\n",
       " 47.3,\n",
       " 47.3,\n",
       " 57.6,\n",
       " 84.0,\n",
       " 57.6,\n",
       " 138.0,\n",
       " 70.0,\n",
       " 52.8,\n",
       " 74.0,\n",
       " 74.02,\n",
       " 53.64,\n",
       " 67.1,\n",
       " 73.9,\n",
       " 53.5,\n",
       " 63.0,\n",
       " 81.83,\n",
       " 55.2,\n",
       " 73.0,\n",
       " 85.8,\n",
       " 85.8,\n",
       " 76.8,\n",
       " 84.0,\n",
       " 82.4,\n",
       " 46.3,\n",
       " 170.0,\n",
       " 117.3,\n",
       " 103.6,\n",
       " 67.1,\n",
       " 81.83,\n",
       " 70.0,\n",
       " 93.7,\n",
       " 82.85,\n",
       " 55.2,\n",
       " 83.0,\n",
       " 46.3,\n",
       " 82.4,\n",
       " 88.7,\n",
       " 67.0,\n",
       " 46.3,\n",
       " 100.6,\n",
       " 63.0,\n",
       " 47.3,\n",
       " 67.04,\n",
       " 73.9,\n",
       " 147.94,\n",
       " 88.5,\n",
       " 171.5,\n",
       " 126.2,\n",
       " 88.5,\n",
       " 81.83,\n",
       " 81.86,\n",
       " 88.7,\n",
       " 117.3,\n",
       " 113.42,\n",
       " 76.0,\n",
       " 86.8,\n",
       " 55.2,\n",
       " 53.64,\n",
       " 94.68,\n",
       " 68.0,\n",
       " 98.96,\n",
       " 84.8,\n",
       " 81.86,\n",
       " 88.5,\n",
       " 90.0,\n",
       " 170.0,\n",
       " 88.8,\n",
       " 90.0,\n",
       " 67.1,\n",
       " 103.52,\n",
       " 126.3,\n",
       " 120.0,\n",
       " 108.45,\n",
       " 140.0,\n",
       " 47.3,\n",
       " 68.1,\n",
       " 78.9,\n",
       " 81.8,\n",
       " 62.1,\n",
       " 67.04,\n",
       " 55.2,\n",
       " 102.0,\n",
       " 175.56,\n",
       " 56.3,\n",
       " 108.62,\n",
       " 88.7,\n",
       " 55.2,\n",
       " 53.3,\n",
       " 67.1,\n",
       " 100.6,\n",
       " 67.1,\n",
       " 126.32,\n",
       " 98.6,\n",
       " 81.8,\n",
       " 174.5,\n",
       " 110.0,\n",
       " 81.86,\n",
       " 138.1,\n",
       " 68.0,\n",
       " 90.0,\n",
       " 68.05,\n",
       " 69.01,\n",
       " 67.0,\n",
       " 63.0,\n",
       " 100.0,\n",
       " 74.0,\n",
       " 47.3,\n",
       " 88.5,\n",
       " 83.81,\n",
       " 68.0,\n",
       " 34.2,\n",
       " 67.1,\n",
       " 68.05,\n",
       " 88.7,\n",
       " 67.05,\n",
       " 88.5,\n",
       " 147.94,\n",
       " 67.05,\n",
       " 73.97,\n",
       " 53.3,\n",
       " 74.0,\n",
       " 62.1,\n",
       " 218.0,\n",
       " 67.05,\n",
       " 74.0,\n",
       " 55.2,\n",
       " 120.0,\n",
       " 67.05,\n",
       " 70.0,\n",
       " 98.59,\n",
       " 67.04,\n",
       " 63.0,\n",
       " 90.0,\n",
       " 74.0,\n",
       " 105.0,\n",
       " 112.0,\n",
       " 112.0,\n",
       " 67.1,\n",
       " 65.0,\n",
       " 67.1,\n",
       " 177.0,\n",
       " 214.56,\n",
       " 177.0,\n",
       " 147.94,\n",
       " 190.0,\n",
       " 157.7,\n",
       " 67.05,\n",
       " 74.0,\n",
       " 88.7,\n",
       " 100.6,\n",
       " 81.8,\n",
       " 88.73,\n",
       " 81.8,\n",
       " 73.97,\n",
       " 190.0,\n",
       " 190.0,\n",
       " 88.76,\n",
       " 103.5,\n",
       " 150.0,\n",
       " 100.0,\n",
       " 66.1,\n",
       " 78.9,\n",
       " 105.0,\n",
       " 92.0,\n",
       " 46.3,\n",
       " 110.0,\n",
       " 88.5,\n",
       " 100.0,\n",
       " 71.0,\n",
       " 82.0,\n",
       " 82.0,\n",
       " 85.8,\n",
       " 81.8,\n",
       " 98.96,\n",
       " 105.5,\n",
       " 204.0,\n",
       " 169.0,\n",
       " 82.0,\n",
       " 103.6,\n",
       " 86.8,\n",
       " 62.1,\n",
       " 62.1,\n",
       " 62.1,\n",
       " 84.8,\n",
       " 62.1,\n",
       " 67.04,\n",
       " 68.05,\n",
       " 95.0,\n",
       " 67.0,\n",
       " 69.01,\n",
       " 63.0,\n",
       " 74.02,\n",
       " 75.0,\n",
       " 67.0,\n",
       " 112.0,\n",
       " 67.1,\n",
       " 63.0,\n",
       " 100.0,\n",
       " 55.2,\n",
       " 67.1,\n",
       " 67.04,\n",
       " 55.2,\n",
       " 35.0,\n",
       " 63.0,\n",
       " 72.4,\n",
       " 88.73,\n",
       " 81.86,\n",
       " 100.0,\n",
       " 115.0,\n",
       " 152.0,\n",
       " 67.06,\n",
       " 82.0,\n",
       " 88.76,\n",
       " 67.04,\n",
       " 94.0,\n",
       " 62.1,\n",
       " 69.0,\n",
       " 62.1,\n",
       " 63.0,\n",
       " 63.0,\n",
       " 97.7,\n",
       " 88.76,\n",
       " 71.0,\n",
       " 81.86,\n",
       " 94.68,\n",
       " 103.5,\n",
       " 63.0,\n",
       " 63.0,\n",
       " 100.6,\n",
       " 81.86,\n",
       " 67.0,\n",
       " 88.8,\n",
       " 79.4,\n",
       " 81.8,\n",
       " 140.0,\n",
       " 68.0,\n",
       " 81.86,\n",
       " 69.0,\n",
       " 67.05,\n",
       " 73.0,\n",
       " 120.0,\n",
       " 102.0,\n",
       " 69.0,\n",
       " 86.8,\n",
       " 120.0,\n",
       " 55.2,\n",
       " 55.2,\n",
       " 46.3,\n",
       " 52.8,\n",
       " 88.5,\n",
       " 73.9,\n",
       " 81.86,\n",
       " 95.0,\n",
       " 63.0,\n",
       " 91.2,\n",
       " 70.0,\n",
       " 73.9,\n",
       " 90.0,\n",
       " 112.0,\n",
       " 86.7,\n",
       " 75.0,\n",
       " 67.05,\n",
       " 115.0,\n",
       " 74.0,\n",
       " 156.0,\n",
       " 82.0,\n",
       " 94.68,\n",
       " 140.0,\n",
       " 74.9,\n",
       " 63.0,\n",
       " 120.0,\n",
       " 62.0,\n",
       " 53.0,\n",
       " 63.0,\n",
       " 85.8,\n",
       " 69.0,\n",
       " 94.68,\n",
       " 37.0,\n",
       " 130.0,\n",
       " 140.0,\n",
       " 46.3,\n",
       " 105.3,\n",
       " 74.0,\n",
       " 67.0,\n",
       " 73.9,\n",
       " 67.0,\n",
       " 73.74,\n",
       " 67.04,\n",
       " 81.8,\n",
       " 55.2,\n",
       " 108.45,\n",
       " 78.0,\n",
       " 84.0,\n",
       " 73.9,\n",
       " 37.0,\n",
       " 98.63,\n",
       " 93.7,\n",
       " 90.0,\n",
       " 93.7,\n",
       " 81.83,\n",
       " 34.2,\n",
       " 90.0,\n",
       " 63.0,\n",
       " 46.3,\n",
       " 35.0,\n",
       " 98.6,\n",
       " 100.6,\n",
       " 55.2,\n",
       " 67.04,\n",
       " 83.1,\n",
       " 80.0,\n",
       " 73.94,\n",
       " 126.2,\n",
       " 83.14,\n",
       " 126.2,\n",
       " 140.0,\n",
       " 85.8,\n",
       " 63.0,\n",
       " 47.3,\n",
       " 47.3,\n",
       " 98.59,\n",
       " 64.1,\n",
       " 67.04,\n",
       " 67.04,\n",
       " 69.01,\n",
       " 67.1,\n",
       " 120.0,\n",
       " 85.8,\n",
       " 71.0,\n",
       " 68.05,\n",
       " 81.86,\n",
       " 68.0,\n",
       " 82.0,\n",
       " 68.05,\n",
       " 74.02,\n",
       " 75.0,\n",
       " 46.3,\n",
       " 120.0,\n",
       " 110.0,\n",
       " 68.05,\n",
       " 74.02,\n",
       " 88.8,\n",
       " 85.0,\n",
       " 67.0,\n",
       " 84.8,\n",
       " 34.2,\n",
       " 81.83,\n",
       " 53.3,\n",
       " 126.32,\n",
       " 69.0,\n",
       " 88.76,\n",
       " 47.3,\n",
       " 53.3,\n",
       " 55.2,\n",
       " 74.0,\n",
       " 58.2,\n",
       " 87.2,\n",
       " 82.85,\n",
       " 81.83,\n",
       " 88.8,\n",
       " 118.3,\n",
       " 70.0,\n",
       " 118.3,\n",
       " 69.01,\n",
       " 67.0,\n",
       " 67.04,\n",
       " 72.0,\n",
       " 57.6,\n",
       " 120.0,\n",
       " 53.3,\n",
       " 82.4,\n",
       " 63.0,\n",
       " 69.0,\n",
       " 94.0,\n",
       " 68.0,\n",
       " 62.1,\n",
       " 120.0,\n",
       " 141.0,\n",
       " 68.0,\n",
       " 63.0,\n",
       " 69.0,\n",
       " 98.6,\n",
       " 78.0,\n",
       " 90.0,\n",
       " 88.5,\n",
       " 81.86,\n",
       " 37.0,\n",
       " 68.0,\n",
       " 102.0,\n",
       " 171.0,\n",
       " 80.0,\n",
       " 147.51,\n",
       " 67.04,\n",
       " 81.86,\n",
       " 82.85,\n",
       " 55.2,\n",
       " 74.0,\n",
       " 74.0,\n",
       " 55.2,\n",
       " 73.97,\n",
       " 73.0,\n",
       " 67.0,\n",
       " 73.9,\n",
       " 100.0,\n",
       " 90.0,\n",
       " 47.3,\n",
       " 53.3,\n",
       " 103.2,\n",
       " 88.76,\n",
       " 120.0,\n",
       " 63.0,\n",
       " 100.57,\n",
       " 69.0,\n",
       " 98.6,\n",
       " 68.0,\n",
       " 88.76,\n",
       " 74.0,\n",
       " 67.1,\n",
       " 57.6,\n",
       " 88.73,\n",
       " 88.8,\n",
       " 67.0,\n",
       " 69.0,\n",
       " 37.0,\n",
       " 126.32,\n",
       " 110.0,\n",
       " 138.1,\n",
       " 60.0,\n",
       " 75.0,\n",
       " 88.7,\n",
       " 73.9,\n",
       " 74.0,\n",
       " 56.3,\n",
       " 75.0,\n",
       " 68.0,\n",
       " 110.0,\n",
       " 58.0,\n",
       " 81.8,\n",
       " 83.8,\n",
       " 72.0,\n",
       " 88.5,\n",
       " 88.8,\n",
       " 73.0,\n",
       " 64.0,\n",
       " 140.0,\n",
       " 102.0,\n",
       " 88.73,\n",
       " 63.0,\n",
       " 100.0,\n",
       " 102.0,\n",
       " 83.1,\n",
       " 46.3,\n",
       " 74.0,\n",
       " 103.6,\n",
       " 73.94,\n",
       " 171.5,\n",
       " 75.0,\n",
       " 86.8,\n",
       " 126.24,\n",
       " 76.9,\n",
       " 83.0,\n",
       " 67.1,\n",
       " 88.73,\n",
       " 88.73,\n",
       " 73.9,\n",
       " 52.8,\n",
       " 85.8,\n",
       " 67.1,\n",
       " 75.0,\n",
       " 194.3,\n",
       " 63.0,\n",
       " 62.0,\n",
       " 74.02,\n",
       " 121.3,\n",
       " 72.4,\n",
       " 88.76,\n",
       " 120.0,\n",
       " 70.0,\n",
       " 75.0,\n",
       " 67.04,\n",
       " 62.0,\n",
       " 138.03,\n",
       " 67.1,\n",
       " 37.0,\n",
       " 53.3,\n",
       " 62.1,\n",
       " 88.5,\n",
       " 110.0,\n",
       " 103.2,\n",
       " 100.57,\n",
       " 69.0,\n",
       " 100.6,\n",
       " 67.0,\n",
       " 68.0,\n",
       " 99.23,\n",
       " 89.84,\n",
       " 67.0,\n",
       " 99.23,\n",
       " 140.0,\n",
       " 98.59,\n",
       " 121.3,\n",
       " 84.0,\n",
       " 120.0,\n",
       " 108.5,\n",
       " 118.0,\n",
       " 73.94,\n",
       " 68.0,\n",
       " 68.0,\n",
       " 46.3,\n",
       " 67.04,\n",
       " 123.7,\n",
       " 68.05,\n",
       " 88.7,\n",
       " ...]"
      ]
     },
     "execution_count": 17,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "w = df['max_power'].tolist()\n",
    "ww=[]\n",
    "for i in range(len(w)):\n",
    "    r=w[i]\n",
    "    if r[-3:]==\"bhp\":\n",
    "        x=r.strip(\" bhp\")\n",
    "    y=float(x)\n",
    "    ww.append(y)\n",
    "ww"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>name</th>\n",
       "      <th>year</th>\n",
       "      <th>selling_price</th>\n",
       "      <th>km_driven</th>\n",
       "      <th>fuel</th>\n",
       "      <th>seller_type</th>\n",
       "      <th>transmission</th>\n",
       "      <th>owner</th>\n",
       "      <th>seats</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Maruti Swift Dzire VDI</td>\n",
       "      <td>2014</td>\n",
       "      <td>450000</td>\n",
       "      <td>145500</td>\n",
       "      <td>Diesel</td>\n",
       "      <td>Individual</td>\n",
       "      <td>Manual</td>\n",
       "      <td>First Owner</td>\n",
       "      <td>5.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Skoda Rapid 1.5 TDI Ambition</td>\n",
       "      <td>2014</td>\n",
       "      <td>370000</td>\n",
       "      <td>120000</td>\n",
       "      <td>Diesel</td>\n",
       "      <td>Individual</td>\n",
       "      <td>Manual</td>\n",
       "      <td>Second Owner</td>\n",
       "      <td>5.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Honda City 2017-2020 EXi</td>\n",
       "      <td>2006</td>\n",
       "      <td>158000</td>\n",
       "      <td>140000</td>\n",
       "      <td>Petrol</td>\n",
       "      <td>Individual</td>\n",
       "      <td>Manual</td>\n",
       "      <td>Third Owner</td>\n",
       "      <td>5.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Hyundai i20 Sportz Diesel</td>\n",
       "      <td>2010</td>\n",
       "      <td>225000</td>\n",
       "      <td>127000</td>\n",
       "      <td>Diesel</td>\n",
       "      <td>Individual</td>\n",
       "      <td>Manual</td>\n",
       "      <td>First Owner</td>\n",
       "      <td>5.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Maruti Swift VXI BSIII</td>\n",
       "      <td>2007</td>\n",
       "      <td>130000</td>\n",
       "      <td>120000</td>\n",
       "      <td>Petrol</td>\n",
       "      <td>Individual</td>\n",
       "      <td>Manual</td>\n",
       "      <td>First Owner</td>\n",
       "      <td>5.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8123</th>\n",
       "      <td>Hyundai i20 Magna</td>\n",
       "      <td>2013</td>\n",
       "      <td>320000</td>\n",
       "      <td>110000</td>\n",
       "      <td>Petrol</td>\n",
       "      <td>Individual</td>\n",
       "      <td>Manual</td>\n",
       "      <td>First Owner</td>\n",
       "      <td>5.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8124</th>\n",
       "      <td>Hyundai Verna CRDi SX</td>\n",
       "      <td>2007</td>\n",
       "      <td>135000</td>\n",
       "      <td>119000</td>\n",
       "      <td>Diesel</td>\n",
       "      <td>Individual</td>\n",
       "      <td>Manual</td>\n",
       "      <td>Fourth &amp; Above Owner</td>\n",
       "      <td>5.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8125</th>\n",
       "      <td>Maruti Swift Dzire ZDi</td>\n",
       "      <td>2009</td>\n",
       "      <td>382000</td>\n",
       "      <td>120000</td>\n",
       "      <td>Diesel</td>\n",
       "      <td>Individual</td>\n",
       "      <td>Manual</td>\n",
       "      <td>First Owner</td>\n",
       "      <td>5.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8126</th>\n",
       "      <td>Tata Indigo CR4</td>\n",
       "      <td>2013</td>\n",
       "      <td>290000</td>\n",
       "      <td>25000</td>\n",
       "      <td>Diesel</td>\n",
       "      <td>Individual</td>\n",
       "      <td>Manual</td>\n",
       "      <td>First Owner</td>\n",
       "      <td>5.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8127</th>\n",
       "      <td>Tata Indigo CR4</td>\n",
       "      <td>2013</td>\n",
       "      <td>290000</td>\n",
       "      <td>25000</td>\n",
       "      <td>Diesel</td>\n",
       "      <td>Individual</td>\n",
       "      <td>Manual</td>\n",
       "      <td>First Owner</td>\n",
       "      <td>5.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>7906 rows × 9 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "                              name  year  selling_price  km_driven    fuel  \\\n",
       "0           Maruti Swift Dzire VDI  2014         450000     145500  Diesel   \n",
       "1     Skoda Rapid 1.5 TDI Ambition  2014         370000     120000  Diesel   \n",
       "2         Honda City 2017-2020 EXi  2006         158000     140000  Petrol   \n",
       "3        Hyundai i20 Sportz Diesel  2010         225000     127000  Diesel   \n",
       "4           Maruti Swift VXI BSIII  2007         130000     120000  Petrol   \n",
       "...                            ...   ...            ...        ...     ...   \n",
       "8123             Hyundai i20 Magna  2013         320000     110000  Petrol   \n",
       "8124         Hyundai Verna CRDi SX  2007         135000     119000  Diesel   \n",
       "8125        Maruti Swift Dzire ZDi  2009         382000     120000  Diesel   \n",
       "8126               Tata Indigo CR4  2013         290000      25000  Diesel   \n",
       "8127               Tata Indigo CR4  2013         290000      25000  Diesel   \n",
       "\n",
       "     seller_type transmission                 owner  seats  \n",
       "0     Individual       Manual           First Owner    5.0  \n",
       "1     Individual       Manual          Second Owner    5.0  \n",
       "2     Individual       Manual           Third Owner    5.0  \n",
       "3     Individual       Manual           First Owner    5.0  \n",
       "4     Individual       Manual           First Owner    5.0  \n",
       "...          ...          ...                   ...    ...  \n",
       "8123  Individual       Manual           First Owner    5.0  \n",
       "8124  Individual       Manual  Fourth & Above Owner    5.0  \n",
       "8125  Individual       Manual           First Owner    5.0  \n",
       "8126  Individual       Manual           First Owner    5.0  \n",
       "8127  Individual       Manual           First Owner    5.0  \n",
       "\n",
       "[7906 rows x 9 columns]"
      ]
     },
     "execution_count": 18,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df=df.drop([\"mileage\",\"engine\",\"max_power\" ,\"torque\"], axis=1)\n",
    "df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>name</th>\n",
       "      <th>year</th>\n",
       "      <th>selling_price</th>\n",
       "      <th>km_driven</th>\n",
       "      <th>fuel</th>\n",
       "      <th>seller_type</th>\n",
       "      <th>transmission</th>\n",
       "      <th>owner</th>\n",
       "      <th>mileage</th>\n",
       "      <th>seats</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Maruti Swift Dzire VDI</td>\n",
       "      <td>2014</td>\n",
       "      <td>450000</td>\n",
       "      <td>145500</td>\n",
       "      <td>Diesel</td>\n",
       "      <td>Individual</td>\n",
       "      <td>Manual</td>\n",
       "      <td>First Owner</td>\n",
       "      <td>23.40</td>\n",
       "      <td>5.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Skoda Rapid 1.5 TDI Ambition</td>\n",
       "      <td>2014</td>\n",
       "      <td>370000</td>\n",
       "      <td>120000</td>\n",
       "      <td>Diesel</td>\n",
       "      <td>Individual</td>\n",
       "      <td>Manual</td>\n",
       "      <td>Second Owner</td>\n",
       "      <td>21.14</td>\n",
       "      <td>5.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Honda City 2017-2020 EXi</td>\n",
       "      <td>2006</td>\n",
       "      <td>158000</td>\n",
       "      <td>140000</td>\n",
       "      <td>Petrol</td>\n",
       "      <td>Individual</td>\n",
       "      <td>Manual</td>\n",
       "      <td>Third Owner</td>\n",
       "      <td>17.70</td>\n",
       "      <td>5.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Hyundai i20 Sportz Diesel</td>\n",
       "      <td>2010</td>\n",
       "      <td>225000</td>\n",
       "      <td>127000</td>\n",
       "      <td>Diesel</td>\n",
       "      <td>Individual</td>\n",
       "      <td>Manual</td>\n",
       "      <td>First Owner</td>\n",
       "      <td>23.00</td>\n",
       "      <td>5.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Maruti Swift VXI BSIII</td>\n",
       "      <td>2007</td>\n",
       "      <td>130000</td>\n",
       "      <td>120000</td>\n",
       "      <td>Petrol</td>\n",
       "      <td>Individual</td>\n",
       "      <td>Manual</td>\n",
       "      <td>First Owner</td>\n",
       "      <td>16.10</td>\n",
       "      <td>5.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8123</th>\n",
       "      <td>Hyundai i20 Magna</td>\n",
       "      <td>2013</td>\n",
       "      <td>320000</td>\n",
       "      <td>110000</td>\n",
       "      <td>Petrol</td>\n",
       "      <td>Individual</td>\n",
       "      <td>Manual</td>\n",
       "      <td>First Owner</td>\n",
       "      <td>18.50</td>\n",
       "      <td>5.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8124</th>\n",
       "      <td>Hyundai Verna CRDi SX</td>\n",
       "      <td>2007</td>\n",
       "      <td>135000</td>\n",
       "      <td>119000</td>\n",
       "      <td>Diesel</td>\n",
       "      <td>Individual</td>\n",
       "      <td>Manual</td>\n",
       "      <td>Fourth &amp; Above Owner</td>\n",
       "      <td>16.80</td>\n",
       "      <td>5.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8125</th>\n",
       "      <td>Maruti Swift Dzire ZDi</td>\n",
       "      <td>2009</td>\n",
       "      <td>382000</td>\n",
       "      <td>120000</td>\n",
       "      <td>Diesel</td>\n",
       "      <td>Individual</td>\n",
       "      <td>Manual</td>\n",
       "      <td>First Owner</td>\n",
       "      <td>19.30</td>\n",
       "      <td>5.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8126</th>\n",
       "      <td>Tata Indigo CR4</td>\n",
       "      <td>2013</td>\n",
       "      <td>290000</td>\n",
       "      <td>25000</td>\n",
       "      <td>Diesel</td>\n",
       "      <td>Individual</td>\n",
       "      <td>Manual</td>\n",
       "      <td>First Owner</td>\n",
       "      <td>23.57</td>\n",
       "      <td>5.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8127</th>\n",
       "      <td>Tata Indigo CR4</td>\n",
       "      <td>2013</td>\n",
       "      <td>290000</td>\n",
       "      <td>25000</td>\n",
       "      <td>Diesel</td>\n",
       "      <td>Individual</td>\n",
       "      <td>Manual</td>\n",
       "      <td>First Owner</td>\n",
       "      <td>23.57</td>\n",
       "      <td>5.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>7906 rows × 10 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "                              name  year  selling_price  km_driven    fuel  \\\n",
       "0           Maruti Swift Dzire VDI  2014         450000     145500  Diesel   \n",
       "1     Skoda Rapid 1.5 TDI Ambition  2014         370000     120000  Diesel   \n",
       "2         Honda City 2017-2020 EXi  2006         158000     140000  Petrol   \n",
       "3        Hyundai i20 Sportz Diesel  2010         225000     127000  Diesel   \n",
       "4           Maruti Swift VXI BSIII  2007         130000     120000  Petrol   \n",
       "...                            ...   ...            ...        ...     ...   \n",
       "8123             Hyundai i20 Magna  2013         320000     110000  Petrol   \n",
       "8124         Hyundai Verna CRDi SX  2007         135000     119000  Diesel   \n",
       "8125        Maruti Swift Dzire ZDi  2009         382000     120000  Diesel   \n",
       "8126               Tata Indigo CR4  2013         290000      25000  Diesel   \n",
       "8127               Tata Indigo CR4  2013         290000      25000  Diesel   \n",
       "\n",
       "     seller_type transmission                 owner  mileage  seats  \n",
       "0     Individual       Manual           First Owner    23.40    5.0  \n",
       "1     Individual       Manual          Second Owner    21.14    5.0  \n",
       "2     Individual       Manual           Third Owner    17.70    5.0  \n",
       "3     Individual       Manual           First Owner    23.00    5.0  \n",
       "4     Individual       Manual           First Owner    16.10    5.0  \n",
       "...          ...          ...                   ...      ...    ...  \n",
       "8123  Individual       Manual           First Owner    18.50    5.0  \n",
       "8124  Individual       Manual  Fourth & Above Owner    16.80    5.0  \n",
       "8125  Individual       Manual           First Owner    19.30    5.0  \n",
       "8126  Individual       Manual           First Owner    23.57    5.0  \n",
       "8127  Individual       Manual           First Owner    23.57    5.0  \n",
       "\n",
       "[7906 rows x 10 columns]"
      ]
     },
     "execution_count": 19,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.insert(8,'mileage',vvv)\n",
    "df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>name</th>\n",
       "      <th>year</th>\n",
       "      <th>selling_price</th>\n",
       "      <th>km_driven</th>\n",
       "      <th>fuel</th>\n",
       "      <th>seller_type</th>\n",
       "      <th>transmission</th>\n",
       "      <th>owner</th>\n",
       "      <th>mileage</th>\n",
       "      <th>engine</th>\n",
       "      <th>seats</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Maruti Swift Dzire VDI</td>\n",
       "      <td>2014</td>\n",
       "      <td>450000</td>\n",
       "      <td>145500</td>\n",
       "      <td>Diesel</td>\n",
       "      <td>Individual</td>\n",
       "      <td>Manual</td>\n",
       "      <td>First Owner</td>\n",
       "      <td>23.40</td>\n",
       "      <td>1248.0</td>\n",
       "      <td>5.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Skoda Rapid 1.5 TDI Ambition</td>\n",
       "      <td>2014</td>\n",
       "      <td>370000</td>\n",
       "      <td>120000</td>\n",
       "      <td>Diesel</td>\n",
       "      <td>Individual</td>\n",
       "      <td>Manual</td>\n",
       "      <td>Second Owner</td>\n",
       "      <td>21.14</td>\n",
       "      <td>1498.0</td>\n",
       "      <td>5.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Honda City 2017-2020 EXi</td>\n",
       "      <td>2006</td>\n",
       "      <td>158000</td>\n",
       "      <td>140000</td>\n",
       "      <td>Petrol</td>\n",
       "      <td>Individual</td>\n",
       "      <td>Manual</td>\n",
       "      <td>Third Owner</td>\n",
       "      <td>17.70</td>\n",
       "      <td>1497.0</td>\n",
       "      <td>5.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Hyundai i20 Sportz Diesel</td>\n",
       "      <td>2010</td>\n",
       "      <td>225000</td>\n",
       "      <td>127000</td>\n",
       "      <td>Diesel</td>\n",
       "      <td>Individual</td>\n",
       "      <td>Manual</td>\n",
       "      <td>First Owner</td>\n",
       "      <td>23.00</td>\n",
       "      <td>1396.0</td>\n",
       "      <td>5.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Maruti Swift VXI BSIII</td>\n",
       "      <td>2007</td>\n",
       "      <td>130000</td>\n",
       "      <td>120000</td>\n",
       "      <td>Petrol</td>\n",
       "      <td>Individual</td>\n",
       "      <td>Manual</td>\n",
       "      <td>First Owner</td>\n",
       "      <td>16.10</td>\n",
       "      <td>1298.0</td>\n",
       "      <td>5.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8123</th>\n",
       "      <td>Hyundai i20 Magna</td>\n",
       "      <td>2013</td>\n",
       "      <td>320000</td>\n",
       "      <td>110000</td>\n",
       "      <td>Petrol</td>\n",
       "      <td>Individual</td>\n",
       "      <td>Manual</td>\n",
       "      <td>First Owner</td>\n",
       "      <td>18.50</td>\n",
       "      <td>1197.0</td>\n",
       "      <td>5.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8124</th>\n",
       "      <td>Hyundai Verna CRDi SX</td>\n",
       "      <td>2007</td>\n",
       "      <td>135000</td>\n",
       "      <td>119000</td>\n",
       "      <td>Diesel</td>\n",
       "      <td>Individual</td>\n",
       "      <td>Manual</td>\n",
       "      <td>Fourth &amp; Above Owner</td>\n",
       "      <td>16.80</td>\n",
       "      <td>1493.0</td>\n",
       "      <td>5.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8125</th>\n",
       "      <td>Maruti Swift Dzire ZDi</td>\n",
       "      <td>2009</td>\n",
       "      <td>382000</td>\n",
       "      <td>120000</td>\n",
       "      <td>Diesel</td>\n",
       "      <td>Individual</td>\n",
       "      <td>Manual</td>\n",
       "      <td>First Owner</td>\n",
       "      <td>19.30</td>\n",
       "      <td>1248.0</td>\n",
       "      <td>5.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8126</th>\n",
       "      <td>Tata Indigo CR4</td>\n",
       "      <td>2013</td>\n",
       "      <td>290000</td>\n",
       "      <td>25000</td>\n",
       "      <td>Diesel</td>\n",
       "      <td>Individual</td>\n",
       "      <td>Manual</td>\n",
       "      <td>First Owner</td>\n",
       "      <td>23.57</td>\n",
       "      <td>1396.0</td>\n",
       "      <td>5.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8127</th>\n",
       "      <td>Tata Indigo CR4</td>\n",
       "      <td>2013</td>\n",
       "      <td>290000</td>\n",
       "      <td>25000</td>\n",
       "      <td>Diesel</td>\n",
       "      <td>Individual</td>\n",
       "      <td>Manual</td>\n",
       "      <td>First Owner</td>\n",
       "      <td>23.57</td>\n",
       "      <td>1396.0</td>\n",
       "      <td>5.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>7906 rows × 11 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "                              name  year  selling_price  km_driven    fuel  \\\n",
       "0           Maruti Swift Dzire VDI  2014         450000     145500  Diesel   \n",
       "1     Skoda Rapid 1.5 TDI Ambition  2014         370000     120000  Diesel   \n",
       "2         Honda City 2017-2020 EXi  2006         158000     140000  Petrol   \n",
       "3        Hyundai i20 Sportz Diesel  2010         225000     127000  Diesel   \n",
       "4           Maruti Swift VXI BSIII  2007         130000     120000  Petrol   \n",
       "...                            ...   ...            ...        ...     ...   \n",
       "8123             Hyundai i20 Magna  2013         320000     110000  Petrol   \n",
       "8124         Hyundai Verna CRDi SX  2007         135000     119000  Diesel   \n",
       "8125        Maruti Swift Dzire ZDi  2009         382000     120000  Diesel   \n",
       "8126               Tata Indigo CR4  2013         290000      25000  Diesel   \n",
       "8127               Tata Indigo CR4  2013         290000      25000  Diesel   \n",
       "\n",
       "     seller_type transmission                 owner  mileage  engine  seats  \n",
       "0     Individual       Manual           First Owner    23.40  1248.0    5.0  \n",
       "1     Individual       Manual          Second Owner    21.14  1498.0    5.0  \n",
       "2     Individual       Manual           Third Owner    17.70  1497.0    5.0  \n",
       "3     Individual       Manual           First Owner    23.00  1396.0    5.0  \n",
       "4     Individual       Manual           First Owner    16.10  1298.0    5.0  \n",
       "...          ...          ...                   ...      ...     ...    ...  \n",
       "8123  Individual       Manual           First Owner    18.50  1197.0    5.0  \n",
       "8124  Individual       Manual  Fourth & Above Owner    16.80  1493.0    5.0  \n",
       "8125  Individual       Manual           First Owner    19.30  1248.0    5.0  \n",
       "8126  Individual       Manual           First Owner    23.57  1396.0    5.0  \n",
       "8127  Individual       Manual           First Owner    23.57  1396.0    5.0  \n",
       "\n",
       "[7906 rows x 11 columns]"
      ]
     },
     "execution_count": 20,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.insert(9,'engine',uu)\n",
    "df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>name</th>\n",
       "      <th>year</th>\n",
       "      <th>selling_price</th>\n",
       "      <th>km_driven</th>\n",
       "      <th>fuel</th>\n",
       "      <th>seller_type</th>\n",
       "      <th>transmission</th>\n",
       "      <th>owner</th>\n",
       "      <th>mileage</th>\n",
       "      <th>engine</th>\n",
       "      <th>max_power</th>\n",
       "      <th>seats</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Maruti Swift Dzire VDI</td>\n",
       "      <td>2014</td>\n",
       "      <td>450000</td>\n",
       "      <td>145500</td>\n",
       "      <td>Diesel</td>\n",
       "      <td>Individual</td>\n",
       "      <td>Manual</td>\n",
       "      <td>First Owner</td>\n",
       "      <td>23.40</td>\n",
       "      <td>1248.0</td>\n",
       "      <td>74.00</td>\n",
       "      <td>5.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Skoda Rapid 1.5 TDI Ambition</td>\n",
       "      <td>2014</td>\n",
       "      <td>370000</td>\n",
       "      <td>120000</td>\n",
       "      <td>Diesel</td>\n",
       "      <td>Individual</td>\n",
       "      <td>Manual</td>\n",
       "      <td>Second Owner</td>\n",
       "      <td>21.14</td>\n",
       "      <td>1498.0</td>\n",
       "      <td>103.52</td>\n",
       "      <td>5.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Honda City 2017-2020 EXi</td>\n",
       "      <td>2006</td>\n",
       "      <td>158000</td>\n",
       "      <td>140000</td>\n",
       "      <td>Petrol</td>\n",
       "      <td>Individual</td>\n",
       "      <td>Manual</td>\n",
       "      <td>Third Owner</td>\n",
       "      <td>17.70</td>\n",
       "      <td>1497.0</td>\n",
       "      <td>78.00</td>\n",
       "      <td>5.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Hyundai i20 Sportz Diesel</td>\n",
       "      <td>2010</td>\n",
       "      <td>225000</td>\n",
       "      <td>127000</td>\n",
       "      <td>Diesel</td>\n",
       "      <td>Individual</td>\n",
       "      <td>Manual</td>\n",
       "      <td>First Owner</td>\n",
       "      <td>23.00</td>\n",
       "      <td>1396.0</td>\n",
       "      <td>90.00</td>\n",
       "      <td>5.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Maruti Swift VXI BSIII</td>\n",
       "      <td>2007</td>\n",
       "      <td>130000</td>\n",
       "      <td>120000</td>\n",
       "      <td>Petrol</td>\n",
       "      <td>Individual</td>\n",
       "      <td>Manual</td>\n",
       "      <td>First Owner</td>\n",
       "      <td>16.10</td>\n",
       "      <td>1298.0</td>\n",
       "      <td>88.20</td>\n",
       "      <td>5.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8123</th>\n",
       "      <td>Hyundai i20 Magna</td>\n",
       "      <td>2013</td>\n",
       "      <td>320000</td>\n",
       "      <td>110000</td>\n",
       "      <td>Petrol</td>\n",
       "      <td>Individual</td>\n",
       "      <td>Manual</td>\n",
       "      <td>First Owner</td>\n",
       "      <td>18.50</td>\n",
       "      <td>1197.0</td>\n",
       "      <td>82.85</td>\n",
       "      <td>5.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8124</th>\n",
       "      <td>Hyundai Verna CRDi SX</td>\n",
       "      <td>2007</td>\n",
       "      <td>135000</td>\n",
       "      <td>119000</td>\n",
       "      <td>Diesel</td>\n",
       "      <td>Individual</td>\n",
       "      <td>Manual</td>\n",
       "      <td>Fourth &amp; Above Owner</td>\n",
       "      <td>16.80</td>\n",
       "      <td>1493.0</td>\n",
       "      <td>110.00</td>\n",
       "      <td>5.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8125</th>\n",
       "      <td>Maruti Swift Dzire ZDi</td>\n",
       "      <td>2009</td>\n",
       "      <td>382000</td>\n",
       "      <td>120000</td>\n",
       "      <td>Diesel</td>\n",
       "      <td>Individual</td>\n",
       "      <td>Manual</td>\n",
       "      <td>First Owner</td>\n",
       "      <td>19.30</td>\n",
       "      <td>1248.0</td>\n",
       "      <td>73.90</td>\n",
       "      <td>5.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8126</th>\n",
       "      <td>Tata Indigo CR4</td>\n",
       "      <td>2013</td>\n",
       "      <td>290000</td>\n",
       "      <td>25000</td>\n",
       "      <td>Diesel</td>\n",
       "      <td>Individual</td>\n",
       "      <td>Manual</td>\n",
       "      <td>First Owner</td>\n",
       "      <td>23.57</td>\n",
       "      <td>1396.0</td>\n",
       "      <td>70.00</td>\n",
       "      <td>5.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8127</th>\n",
       "      <td>Tata Indigo CR4</td>\n",
       "      <td>2013</td>\n",
       "      <td>290000</td>\n",
       "      <td>25000</td>\n",
       "      <td>Diesel</td>\n",
       "      <td>Individual</td>\n",
       "      <td>Manual</td>\n",
       "      <td>First Owner</td>\n",
       "      <td>23.57</td>\n",
       "      <td>1396.0</td>\n",
       "      <td>70.00</td>\n",
       "      <td>5.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>7906 rows × 12 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "                              name  year  selling_price  km_driven    fuel  \\\n",
       "0           Maruti Swift Dzire VDI  2014         450000     145500  Diesel   \n",
       "1     Skoda Rapid 1.5 TDI Ambition  2014         370000     120000  Diesel   \n",
       "2         Honda City 2017-2020 EXi  2006         158000     140000  Petrol   \n",
       "3        Hyundai i20 Sportz Diesel  2010         225000     127000  Diesel   \n",
       "4           Maruti Swift VXI BSIII  2007         130000     120000  Petrol   \n",
       "...                            ...   ...            ...        ...     ...   \n",
       "8123             Hyundai i20 Magna  2013         320000     110000  Petrol   \n",
       "8124         Hyundai Verna CRDi SX  2007         135000     119000  Diesel   \n",
       "8125        Maruti Swift Dzire ZDi  2009         382000     120000  Diesel   \n",
       "8126               Tata Indigo CR4  2013         290000      25000  Diesel   \n",
       "8127               Tata Indigo CR4  2013         290000      25000  Diesel   \n",
       "\n",
       "     seller_type transmission                 owner  mileage  engine  \\\n",
       "0     Individual       Manual           First Owner    23.40  1248.0   \n",
       "1     Individual       Manual          Second Owner    21.14  1498.0   \n",
       "2     Individual       Manual           Third Owner    17.70  1497.0   \n",
       "3     Individual       Manual           First Owner    23.00  1396.0   \n",
       "4     Individual       Manual           First Owner    16.10  1298.0   \n",
       "...          ...          ...                   ...      ...     ...   \n",
       "8123  Individual       Manual           First Owner    18.50  1197.0   \n",
       "8124  Individual       Manual  Fourth & Above Owner    16.80  1493.0   \n",
       "8125  Individual       Manual           First Owner    19.30  1248.0   \n",
       "8126  Individual       Manual           First Owner    23.57  1396.0   \n",
       "8127  Individual       Manual           First Owner    23.57  1396.0   \n",
       "\n",
       "      max_power  seats  \n",
       "0         74.00    5.0  \n",
       "1        103.52    5.0  \n",
       "2         78.00    5.0  \n",
       "3         90.00    5.0  \n",
       "4         88.20    5.0  \n",
       "...         ...    ...  \n",
       "8123      82.85    5.0  \n",
       "8124     110.00    5.0  \n",
       "8125      73.90    5.0  \n",
       "8126      70.00    5.0  \n",
       "8127      70.00    5.0  \n",
       "\n",
       "[7906 rows x 12 columns]"
      ]
     },
     "execution_count": 21,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.insert(10,'max_power',ww)\n",
    "df"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Accuracies Using Label Encoding"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {},
   "outputs": [],
   "source": [
    "le=LabelEncoder()\n",
    "tempp=df\n",
    "tempp['name']=le.fit_transform(tempp['name'])       \n",
    "tempp['fuel']=le.fit_transform(tempp['fuel'])\n",
    "tempp['seller_type']=le.fit_transform(tempp['seller_type'])\n",
    "tempp['transmission']=le.fit_transform(tempp['transmission'])\n",
    "tempp['owner']=le.fit_transform(tempp['owner'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {},
   "outputs": [],
   "source": [
    "x1=tempp[['name','year','km_driven','fuel','seller_type','transmission','owner','mileage','engine','max_power','seats']].values\n",
    "y1=tempp['selling_price'].values"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.model_selection import train_test_split                                    #splitting data\n",
    "x1_train,x1_test,y1_train,y1_test=train_test_split(x1,y1,test_size=0.2,random_state=0)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Randomforest Model Building and Accuracy Score (LE)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "RandomForestRegressor(random_state=0)"
      ]
     },
     "execution_count": 25,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "regressor = RandomForestRegressor(n_estimators = 100, random_state = 0)\n",
    "\n",
    "# fit the regressor with x and y data\n",
    "\n",
    "regressor.fit(x1_train, y1_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {},
   "outputs": [],
   "source": [
    "reg_pred = regressor.predict(x1_test)  "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "model accuracy: 0.97652363964752\n",
      "mean_absolute_error:  62856.18127966407\n",
      "r2_score:  0.97652363964752\n"
     ]
    }
   ],
   "source": [
    "print('model accuracy:',regressor.score(x1_test, y1_test))\n",
    "print('mean_absolute_error: ',mean_absolute_error(y1_test, reg_pred))\n",
    "print(\"r2_score: \",r2_score(y1_test,reg_pred))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## XGradientBoost regressor Model Building and Accuracy Score (LE)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.ensemble import RandomForestRegressor, ExtraTreesRegressor, GradientBoostingRegressor, AdaBoostRegressor\n",
    "from xgboost import XGBRegressor, XGBRFRegressor\n",
    "from sklearn import metrics\n",
    "from sklearn.metrics import r2_score"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "XGBRFRegressor(base_score=0.5, booster='gbtree', colsample_bylevel=1,\n",
       "               colsample_bytree=1, gamma=0, gpu_id=-1, importance_type='gain',\n",
       "               interaction_constraints='', max_delta_step=0, max_depth=6,\n",
       "               min_child_weight=1, missing=nan, monotone_constraints='()',\n",
       "               n_estimators=500, n_jobs=8, num_parallel_tree=500,\n",
       "               objective='reg:squarederror', random_state=42, reg_alpha=0,\n",
       "               scale_pos_weight=1, tree_method='exact', validate_parameters=1,\n",
       "               verbosity=None)"
      ]
     },
     "execution_count": 29,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "xgbrf = XGBRFRegressor(n_estimators=500, random_state=42)\n",
    "xgbrf.fit(x1_train, y1_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "metadata": {},
   "outputs": [],
   "source": [
    "y_predXGBRF = xgbrf.predict(x1_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Mean Absolute Error:  96537.915\n",
      "Mean Squared Error:  27947332868.129\n",
      "Root Mean Squared Error:  167174.558\n",
      "R2 score:  0.958\n"
     ]
    }
   ],
   "source": [
    "print('Mean Absolute Error: ', round(metrics.mean_absolute_error(y1_test, y_predXGBRF), 3))\n",
    "print('Mean Squared Error: ', round(metrics.mean_squared_error(y1_test, y_predXGBRF), 3))\n",
    "print('Root Mean Squared Error: ', round(np.sqrt(metrics.mean_squared_error(y1_test, y_predXGBRF)), 3))\n",
    "print('R2 score: ', round(r2_score(y1_test, y_predXGBRF), 3))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## DecisionTreeRegressor regressor Model Building and Accuracy Score (LE)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "DecisionTreeRegressor(criterion='mae', random_state=0)"
      ]
     },
     "execution_count": 32,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from sklearn.tree import DecisionTreeRegressor\n",
    "dtr=DecisionTreeRegressor(random_state=0,criterion='mae')\n",
    "dtr.fit(x1_train,y1_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([430000., 779000., 210000., ...,  85000., 330000., 620000.])"
      ]
     },
     "execution_count": 33,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "y_preddtr=dtr.predict(x1_test)\n",
    "y_preddtr"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.9486239781759288"
      ]
     },
     "execution_count": 34,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from sklearn.metrics import r2_score\n",
    "r2_score(y1_test,y_preddtr)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Multilinear regressor Model Building and Accuracy Score (LE)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.linear_model import LinearRegression"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[1.760e+03, 2.017e+03, 3.800e+04, ..., 1.199e+03, 8.400e+01,\n",
       "        5.000e+00],\n",
       "       [3.340e+02, 2.019e+03, 7.032e+03, ..., 1.199e+03, 8.876e+01,\n",
       "        5.000e+00],\n",
       "       [2.830e+02, 2.010e+03, 1.100e+05, ..., 1.399e+03, 6.800e+01,\n",
       "        5.000e+00],\n",
       "       ...,\n",
       "       [1.332e+03, 2.004e+03, 1.200e+05, ..., 9.980e+02, 6.710e+01,\n",
       "        5.000e+00],\n",
       "       [4.850e+02, 2.018e+03, 1.200e+05, ..., 9.980e+02, 6.805e+01,\n",
       "        5.000e+00],\n",
       "       [1.120e+02, 2.016e+03, 1.200e+05, ..., 2.499e+03, 7.240e+01,\n",
       "        1.000e+01]])"
      ]
     },
     "execution_count": 36,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from sklearn.model_selection import train_test_split\n",
    "x_train, x_test, y_train, y_test = train_test_split(x1,y1,test_size=0.2,random_state=0)\n",
    "x_test"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "LinearRegression()"
      ]
     },
     "execution_count": 37,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "lr=LinearRegression()\n",
    "lr.fit(x_train,y_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([ 576589.32863532, 1025065.05989734,  138133.0867779 , ...,\n",
       "       -233135.4428312 ,  327109.71455866,  227065.3351432 ])"
      ]
     },
     "execution_count": 38,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "y_pred=lr.predict(x_test)\n",
    "y_pred"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.6760179653461398"
      ]
     },
     "execution_count": 39,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from sklearn.metrics import r2_score\n",
    "r2_score(y_test,y_pred)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## KNN regressor Model Building and Accuracy Score (LE)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.neighbors import KNeighborsRegressor"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "KNeighborsRegressor(n_neighbors=3)"
      ]
     },
     "execution_count": 41,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "model=KNeighborsRegressor(n_neighbors=3,p=2)\n",
    "model.fit(x1_train,y1_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Accuracy from the model 87829970235.26\n"
     ]
    }
   ],
   "source": [
    "print('Accuracy from the model {:^0.2f}'.\n",
    "      format(metrics.mean_squared_error(y1_test,model.predict(x1_test))))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Polynomial regressor Model Building and Accuracy Score (LE)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.preprocessing import PolynomialFeatures\n",
    "from sklearn import linear_model"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[1.00000000e+00, 1.75800000e+03, 2.01700000e+03, ...,\n",
       "        7.05600000e+03, 4.20000000e+02, 2.50000000e+01],\n",
       "       [1.00000000e+00, 1.58300000e+03, 2.01700000e+03, ...,\n",
       "        2.36728996e+04, 1.07702000e+03, 4.90000000e+01],\n",
       "       [1.00000000e+00, 8.52000000e+02, 2.01900000e+03, ...,\n",
       "        1.46410000e+04, 9.68000000e+02, 6.40000000e+01],\n",
       "       ...,\n",
       "       [1.00000000e+00, 4.47000000e+02, 2.01500000e+03, ...,\n",
       "        1.37592900e+04, 8.21100000e+02, 4.90000000e+01],\n",
       "       [1.00000000e+00, 8.86000000e+02, 2.01300000e+03, ...,\n",
       "        1.44000000e+04, 8.40000000e+02, 4.90000000e+01],\n",
       "       [1.00000000e+00, 1.65200000e+03, 2.00700000e+03, ...,\n",
       "        4.90000000e+03, 3.50000000e+02, 2.50000000e+01]])"
      ]
     },
     "execution_count": 44,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "poly = PolynomialFeatures(degree=2)\n",
    "train_x_poly = poly.fit_transform(x1_train)\n",
    "train_x_poly"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Coefficients:  [-3.90895351e+03  2.83427036e+04  4.01486074e+06  1.65335145e+02\n",
      "  3.02722636e+07  5.27060053e+07  5.84866559e+07  2.67105785e+06\n",
      " -3.10142713e+06  2.18814199e+04 -2.95286234e+06  4.52929638e+06\n",
      "  1.20560303e-02 -1.46352205e+01  5.93034551e-04  7.20609259e+01\n",
      "  1.92943512e+02 -7.51097786e+01 -1.75357485e+01  2.70251339e+01\n",
      "  2.68915155e-01 -1.33078439e+00  9.30194862e+00 -9.82744257e+02\n",
      " -8.48452207e-02 -1.53884975e+04 -2.58969293e+04 -5.80250879e+04\n",
      " -1.24819677e+03  1.48697428e+03 -1.18566681e+01  1.48198817e+03\n",
      " -2.14874809e+03  1.97171175e-07  6.11507655e-02  1.78496416e+00\n",
      "  1.60006908e+00 -3.45169776e-02  6.30653482e-02  5.89015894e-04\n",
      " -9.40055028e-03 -5.15908210e-02  3.65143389e+00 -3.20344419e+03\n",
      "  7.85516661e+04 -1.42403315e+03  1.51117919e+04  2.30329443e+02\n",
      " -1.10887909e+03  7.49004449e+03 -2.47383656e+03  7.69444521e+03\n",
      " -5.91075234e+04 -8.54215481e+03 -1.22412673e+02 -3.94364017e+03\n",
      " -1.29919026e+04  5.85216591e+07 -6.98347868e+04 -2.60073464e+03\n",
      "  5.61821472e+02 -1.30471137e+04  4.74402116e+04  2.09187899e+03\n",
      " -5.18109600e+02  1.00311415e+01 -4.29040325e+01 -3.97509588e+03\n",
      "  1.25933311e+03  1.22345928e+01  1.78411405e+01 -8.92080918e+02\n",
      "  4.22055982e-02  2.31398012e+00  6.94073318e+01 -2.39686525e+00\n",
      " -1.62524607e+03 -1.43855747e+04]\n",
      "Intercept:  -4098238165.8291583\n"
     ]
    }
   ],
   "source": [
    "clf = linear_model.LinearRegression()\n",
    "train_y_ = clf.fit(train_x_poly, y1_train)\n",
    "# The coefficients\n",
    "print ('Coefficients: ', clf.coef_)\n",
    "print ('Intercept: ',clf.intercept_)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 46,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Mean absolute error: 147583.91\n",
      "Residual sum of squares (MSE): 63108416276.21\n",
      "R2-score: 0.90\n"
     ]
    }
   ],
   "source": [
    "from sklearn.metrics import r2_score\n",
    "\n",
    "test_x_poly = poly.fit_transform(x1_test)\n",
    "test_y_ = clf.predict(test_x_poly)\n",
    "\n",
    "print(\"Mean absolute error: %.2f\" % np.mean(np.absolute(test_y_ - y1_test)))\n",
    "print(\"Residual sum of squares (MSE): %.2f\" % np.mean((test_y_ - y1_test) ** 2))\n",
    "print(\"R2-score: %.2f\" % r2_score(test_y_ , y1_test) )"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Lasso regression Model Building and Accuracy Score (LE)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 49,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.linear_model import Lasso\n",
    "lasso_reg1 = Lasso(normalize=True, max_iter=1e6)\n",
    "lasso_reg1.fit(x1_train, y1_train)     \n",
    "Y_pred1 = lasso_reg1.predict(x1_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 50,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "model accuracy: 0.6760185543420238\n",
      "mean_absolute_error:  285646.0099756733\n",
      "r2_score:  0.6760185543420238\n"
     ]
    }
   ],
   "source": [
    "print('model accuracy:',lasso_reg1.score(x1_test, y1_test))\n",
    "print('mean_absolute_error: ',mean_absolute_error(y1_test, Y_pred1))\n",
    "print(\"r2_score: \",r2_score(y1_test,Y_pred1))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Acuracies using OneHot Encoding"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 51,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.preprocessing import OneHotEncoder\n",
    "from sklearn.compose import make_column_transformer\n",
    "from sklearn.pipeline import make_pipeline"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 52,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "OneHotEncoder()"
      ]
     },
     "execution_count": 52,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "ohe = OneHotEncoder()\n",
    "ohe.fit(df[['name','fuel','seller_type','transmission','owner']])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 53,
   "metadata": {},
   "outputs": [],
   "source": [
    "column_trans = make_column_transformer((OneHotEncoder(categories=ohe.categories_),['name','fuel','seller_type','transmission','owner']),remainder='passthrough')\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Multilinear regressor Model Building and Accuracy Score (OHE)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 54,
   "metadata": {},
   "outputs": [],
   "source": [
    "LR = LinearRegression()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 55,
   "metadata": {},
   "outputs": [],
   "source": [
    "pipe = make_pipeline(column_trans,LR)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 56,
   "metadata": {},
   "outputs": [],
   "source": [
    "x = df.drop([\"selling_price\"],axis=1)\n",
    "y = df[\"selling_price\"]\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 57,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>name</th>\n",
       "      <th>year</th>\n",
       "      <th>km_driven</th>\n",
       "      <th>fuel</th>\n",
       "      <th>seller_type</th>\n",
       "      <th>transmission</th>\n",
       "      <th>owner</th>\n",
       "      <th>mileage</th>\n",
       "      <th>engine</th>\n",
       "      <th>max_power</th>\n",
       "      <th>seats</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>4048</th>\n",
       "      <td>1760</td>\n",
       "      <td>2017</td>\n",
       "      <td>38000</td>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>23.84</td>\n",
       "      <td>1199.0</td>\n",
       "      <td>84.00</td>\n",
       "      <td>5.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4831</th>\n",
       "      <td>334</td>\n",
       "      <td>2019</td>\n",
       "      <td>7032</td>\n",
       "      <td>3</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>19.00</td>\n",
       "      <td>1199.0</td>\n",
       "      <td>88.76</td>\n",
       "      <td>5.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5123</th>\n",
       "      <td>283</td>\n",
       "      <td>2010</td>\n",
       "      <td>110000</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>20.00</td>\n",
       "      <td>1399.0</td>\n",
       "      <td>68.00</td>\n",
       "      <td>5.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6505</th>\n",
       "      <td>871</td>\n",
       "      <td>2015</td>\n",
       "      <td>70000</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>15.40</td>\n",
       "      <td>1997.0</td>\n",
       "      <td>120.00</td>\n",
       "      <td>7.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>46</th>\n",
       "      <td>1050</td>\n",
       "      <td>2018</td>\n",
       "      <td>10300</td>\n",
       "      <td>3</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>23.95</td>\n",
       "      <td>998.0</td>\n",
       "      <td>67.05</td>\n",
       "      <td>5.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7813</th>\n",
       "      <td>918</td>\n",
       "      <td>2011</td>\n",
       "      <td>95000</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>11.79</td>\n",
       "      <td>2179.0</td>\n",
       "      <td>120.00</td>\n",
       "      <td>8.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2301</th>\n",
       "      <td>433</td>\n",
       "      <td>2016</td>\n",
       "      <td>61915</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>27.30</td>\n",
       "      <td>1498.0</td>\n",
       "      <td>98.60</td>\n",
       "      <td>5.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>572</th>\n",
       "      <td>1332</td>\n",
       "      <td>2004</td>\n",
       "      <td>120000</td>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>4</td>\n",
       "      <td>18.90</td>\n",
       "      <td>998.0</td>\n",
       "      <td>67.10</td>\n",
       "      <td>5.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5058</th>\n",
       "      <td>485</td>\n",
       "      <td>2018</td>\n",
       "      <td>120000</td>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>20.30</td>\n",
       "      <td>998.0</td>\n",
       "      <td>68.05</td>\n",
       "      <td>5.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7427</th>\n",
       "      <td>112</td>\n",
       "      <td>2016</td>\n",
       "      <td>120000</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>13.58</td>\n",
       "      <td>2499.0</td>\n",
       "      <td>72.40</td>\n",
       "      <td>10.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>1582 rows × 11 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "      name  year  km_driven  fuel  seller_type  transmission  owner  mileage  \\\n",
       "4048  1760  2017      38000     3            1             1      2    23.84   \n",
       "4831   334  2019       7032     3            2             0      0    19.00   \n",
       "5123   283  2010     110000     1            1             1      2    20.00   \n",
       "6505   871  2015      70000     1            1             1      0    15.40   \n",
       "46    1050  2018      10300     3            0             1      0    23.95   \n",
       "...    ...   ...        ...   ...          ...           ...    ...      ...   \n",
       "7813   918  2011      95000     1            1             0      2    11.79   \n",
       "2301   433  2016      61915     1            1             1      0    27.30   \n",
       "572   1332  2004     120000     3            1             1      4    18.90   \n",
       "5058   485  2018     120000     3            1             1      0    20.30   \n",
       "7427   112  2016     120000     1            1             1      0    13.58   \n",
       "\n",
       "      engine  max_power  seats  \n",
       "4048  1199.0      84.00    5.0  \n",
       "4831  1199.0      88.76    5.0  \n",
       "5123  1399.0      68.00    5.0  \n",
       "6505  1997.0     120.00    7.0  \n",
       "46     998.0      67.05    5.0  \n",
       "...      ...        ...    ...  \n",
       "7813  2179.0     120.00    8.0  \n",
       "2301  1498.0      98.60    5.0  \n",
       "572    998.0      67.10    5.0  \n",
       "5058   998.0      68.05    5.0  \n",
       "7427  2499.0      72.40   10.0  \n",
       "\n",
       "[1582 rows x 11 columns]"
      ]
     },
     "execution_count": 57,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from sklearn.model_selection import train_test_split\n",
    "x_train, x_test, y_train, y_test = train_test_split(x,y,test_size=0.2,random_state=0)\n",
    "x_test"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 58,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Pipeline(steps=[('columntransformer',\n",
       "                 ColumnTransformer(remainder='passthrough',\n",
       "                                   transformers=[('onehotencoder',\n",
       "                                                  OneHotEncoder(categories=[array([   0,    1,    2, ..., 1979, 1980, 1981]),\n",
       "                                                                            array([0, 1, 2, 3]),\n",
       "                                                                            array([0, 1, 2]),\n",
       "                                                                            array([0, 1]),\n",
       "                                                                            array([0, 1, 2, 3, 4])]),\n",
       "                                                  ['name', 'fuel',\n",
       "                                                   'seller_type',\n",
       "                                                   'transmission',\n",
       "                                                   'owner'])])),\n",
       "                ('linearregression', LinearRegression())])"
      ]
     },
     "execution_count": 58,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "pipe.fit(x_train,y_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 59,
   "metadata": {},
   "outputs": [],
   "source": [
    "y_pred1 = pipe.predict(x_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 60,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.9566464940347523"
      ]
     },
     "execution_count": 60,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "r2_score(y_test,y_pred1)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## DecisionTreeRegressor regressor Model Building and Accuracy Score (OHE)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 61,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "DecisionTreeRegressor(criterion='mae', random_state=0)"
      ]
     },
     "execution_count": 61,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "dtr1=DecisionTreeRegressor(random_state=0,criterion='mae')\n",
    "dtr1.fit(x_train,y_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 62,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([430000., 779000., 210000., ...,  85000., 330000., 620000.])"
      ]
     },
     "execution_count": 62,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "y_pred1=dtr1.predict(x_test)\n",
    "y_pred1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 63,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.9486239781759288"
      ]
     },
     "execution_count": 63,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from sklearn.metrics import r2_score\n",
    "r2_score(y_test,y_pred1)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## XGradientBoost regressor Model Building and Accuracy Score (OHE)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 64,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "XGBRFRegressor(base_score=0.5, booster='gbtree', colsample_bylevel=1,\n",
       "               colsample_bytree=1, gamma=0, gpu_id=-1, importance_type='gain',\n",
       "               interaction_constraints='', max_delta_step=0, max_depth=6,\n",
       "               min_child_weight=1, missing=nan, monotone_constraints='()',\n",
       "               n_estimators=500, n_jobs=8, num_parallel_tree=500,\n",
       "               objective='reg:squarederror', random_state=42, reg_alpha=0,\n",
       "               scale_pos_weight=1, tree_method='exact', validate_parameters=1,\n",
       "               verbosity=None)"
      ]
     },
     "execution_count": 64,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "xgbrf1 = XGBRFRegressor(n_estimators=500, random_state=42)\n",
    "xgbrf1.fit(x_train, y_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 65,
   "metadata": {},
   "outputs": [],
   "source": [
    "y_predXGBRF1 = xgbrf.predict(x_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 66,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Mean Absolute Error:  96537.915\n",
      "Mean Squared Error:  27947332868.129\n",
      "Root Mean Squared Error:  167174.558\n",
      "R2 score:  0.958\n"
     ]
    }
   ],
   "source": [
    "print('Mean Absolute Error: ', round(metrics.mean_absolute_error(y_test, y_predXGBRF1), 3))\n",
    "print('Mean Squared Error: ', round(metrics.mean_squared_error(y_test, y_predXGBRF1), 3))\n",
    "print('Root Mean Squared Error: ', round(np.sqrt(metrics.mean_squared_error(y_test, y_predXGBRF1)), 3))\n",
    "print('R2 score: ', round(r2_score(y_test, y_predXGBRF1), 3))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Randomforest Model Building and Accuracy Score (OHE)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 67,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "RandomForestRegressor(random_state=0)"
      ]
     },
     "execution_count": 67,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "regressor2 = RandomForestRegressor(n_estimators = 100, random_state = 0)\n",
    "\n",
    "# fit the regressor with x and y data\n",
    "\n",
    "regressor2.fit(x_train, y_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 68,
   "metadata": {},
   "outputs": [],
   "source": [
    "reg_pred2 = regressor2.predict(x_test)  "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 69,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "model accuracy: 0.97652363964752\n",
      "mean_absolute_error:  62856.18127966407\n",
      "r2_score:  0.97652363964752\n"
     ]
    }
   ],
   "source": [
    "print('model accuracy:',regressor2.score(x_test, y_test))\n",
    "print('mean_absolute_error: ',mean_absolute_error(y_test, reg_pred2))\n",
    "print(\"r2_score: \",r2_score(y1_test,reg_pred2))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## KNN regressor Model Building and Accuracy Score (OHE)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 70,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "KNeighborsRegressor(n_neighbors=3)"
      ]
     },
     "execution_count": 70,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "model1=KNeighborsRegressor(n_neighbors=3,p=2)\n",
    "model1.fit(x_train,y_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 71,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Accuracy from the model 87829970235.26\n"
     ]
    }
   ],
   "source": [
    "print('Accuracy from the model {:^0.2f}'.\n",
    "      format(metrics.mean_squared_error(y_test,model1.predict(x_test))))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Polynomial regressor Model Building and Accuracy Score (OHE)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 72,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.preprocessing import PolynomialFeatures\n",
    "from sklearn import linear_model"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 73,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Mean absolute error: 147583.91\n",
      "Residual sum of squares (MSE): 63108416276.21\n",
      "R2-score: 0.90\n"
     ]
    }
   ],
   "source": [
    "from sklearn.metrics import r2_score\n",
    "\n",
    "test_x_poly = poly.fit_transform(x1_test)\n",
    "test_y_ = clf.predict(test_x_poly)\n",
    "\n",
    "print(\"Mean absolute error: %.2f\" % np.mean(np.absolute(test_y_ - y1_test)))\n",
    "print(\"Residual sum of squares (MSE): %.2f\" % np.mean((test_y_ - y1_test) ** 2))\n",
    "print(\"R2-score: %.2f\" % r2_score(test_y_ , y1_test) )"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 74,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[1.00000000e+00, 1.75800000e+03, 2.01700000e+03, ...,\n",
       "        7.05600000e+03, 4.20000000e+02, 2.50000000e+01],\n",
       "       [1.00000000e+00, 1.58300000e+03, 2.01700000e+03, ...,\n",
       "        2.36728996e+04, 1.07702000e+03, 4.90000000e+01],\n",
       "       [1.00000000e+00, 8.52000000e+02, 2.01900000e+03, ...,\n",
       "        1.46410000e+04, 9.68000000e+02, 6.40000000e+01],\n",
       "       ...,\n",
       "       [1.00000000e+00, 4.47000000e+02, 2.01500000e+03, ...,\n",
       "        1.37592900e+04, 8.21100000e+02, 4.90000000e+01],\n",
       "       [1.00000000e+00, 8.86000000e+02, 2.01300000e+03, ...,\n",
       "        1.44000000e+04, 8.40000000e+02, 4.90000000e+01],\n",
       "       [1.00000000e+00, 1.65200000e+03, 2.00700000e+03, ...,\n",
       "        4.90000000e+03, 3.50000000e+02, 2.50000000e+01]])"
      ]
     },
     "execution_count": 74,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "poly1 = PolynomialFeatures(degree=2)\n",
    "train_x_poly1 = poly1.fit_transform(x_train)\n",
    "train_x_poly1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 75,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Coefficients:  [-3.90895351e+03  2.83427036e+04  4.01486074e+06  1.65335145e+02\n",
      "  3.02722636e+07  5.27060053e+07  5.84866559e+07  2.67105785e+06\n",
      " -3.10142713e+06  2.18814199e+04 -2.95286234e+06  4.52929638e+06\n",
      "  1.20560303e-02 -1.46352205e+01  5.93034551e-04  7.20609259e+01\n",
      "  1.92943512e+02 -7.51097786e+01 -1.75357485e+01  2.70251339e+01\n",
      "  2.68915155e-01 -1.33078439e+00  9.30194862e+00 -9.82744257e+02\n",
      " -8.48452207e-02 -1.53884975e+04 -2.58969293e+04 -5.80250879e+04\n",
      " -1.24819677e+03  1.48697428e+03 -1.18566681e+01  1.48198817e+03\n",
      " -2.14874809e+03  1.97171175e-07  6.11507655e-02  1.78496416e+00\n",
      "  1.60006908e+00 -3.45169776e-02  6.30653482e-02  5.89015894e-04\n",
      " -9.40055028e-03 -5.15908210e-02  3.65143389e+00 -3.20344419e+03\n",
      "  7.85516661e+04 -1.42403315e+03  1.51117919e+04  2.30329443e+02\n",
      " -1.10887909e+03  7.49004449e+03 -2.47383656e+03  7.69444521e+03\n",
      " -5.91075234e+04 -8.54215481e+03 -1.22412673e+02 -3.94364017e+03\n",
      " -1.29919026e+04  5.85216591e+07 -6.98347868e+04 -2.60073464e+03\n",
      "  5.61821472e+02 -1.30471137e+04  4.74402116e+04  2.09187899e+03\n",
      " -5.18109600e+02  1.00311415e+01 -4.29040325e+01 -3.97509588e+03\n",
      "  1.25933311e+03  1.22345928e+01  1.78411405e+01 -8.92080918e+02\n",
      "  4.22055982e-02  2.31398012e+00  6.94073318e+01 -2.39686525e+00\n",
      " -1.62524607e+03 -1.43855747e+04]\n",
      "Intercept:  -4098238165.8291583\n"
     ]
    }
   ],
   "source": [
    "clf1 = linear_model.LinearRegression()\n",
    "train_y_1 = clf1.fit(train_x_poly1, y_train)\n",
    "# The coefficients\n",
    "print ('Coefficients: ', clf1.coef_)\n",
    "print ('Intercept: ',clf1.intercept_)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 76,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Mean absolute error: 147583.91\n",
      "Residual sum of squares (MSE): 63108416276.21\n",
      "R2-score: 0.90\n"
     ]
    }
   ],
   "source": [
    "from sklearn.metrics import r2_score\n",
    "\n",
    "test_x_poly1 = poly1.fit_transform(x_test)\n",
    "test_y_1 = clf1.predict(test_x_poly1)\n",
    "\n",
    "print(\"Mean absolute error: %.2f\" % np.mean(np.absolute(test_y_1 - y_test)))\n",
    "print(\"Residual sum of squares (MSE): %.2f\" % np.mean((test_y_1 - y_test) ** 2))\n",
    "print(\"R2-score: %.2f\" % r2_score(test_y_1 , y_test) )"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Lasso regression Model Building and Accuracy Score (OHE)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 77,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.linear_model import Lasso\n",
    "lasso_reg = Lasso(normalize=True, max_iter=1e6)\n",
    "lasso_reg.fit(x_train, y_train)     \n",
    "Y_pred = lasso_reg.predict(x_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 78,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "model accuracy: 0.6760185543420226\n",
      "mean_absolute_error:  285646.00997567375\n",
      "r2_score:  0.6760185543420226\n"
     ]
    }
   ],
   "source": [
    "print('model accuracy:',lasso_reg.score(x_test, y_test))\n",
    "print('mean_absolute_error: ',mean_absolute_error(y_test, Y_pred))\n",
    "print(\"r2_score: \",r2_score(y_test,Y_pred))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.5"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
